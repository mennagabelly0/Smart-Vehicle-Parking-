
Smart_Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08002010  08002010  00012010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002128  08002128  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002128  08002128  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002128  08002128  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000003c  0800216c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800216c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070fe  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000116d  00000000  00000000  00027163  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001146  00000000  00000000  000282d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002f0  00000000  00000000  00029418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000258  00000000  00000000  00029708  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002e12  00000000  00000000  00029960  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004942  00000000  00000000  0002c772  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a2ee  00000000  00000000  000310b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003b3a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000091c  00000000  00000000  0003b420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000003c 	.word	0x2000003c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001ff8 	.word	0x08001ff8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000040 	.word	0x20000040
 800016c:	08001ff8 	.word	0x08001ff8

08000170 <main>:

LCD_Pins_Config_t LCD1 = {GPIOB,GPIOB,GPIOB,GPIOB,GPIO_PIN_11,GPIO_PIN_10};
LCD_Pins_Config_t LCD2 = {GPIOA,GPIOA,GPIOA,GPIOA,GPIO_PIN_5,GPIO_PIN_6};

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08e      	sub	sp, #56	; 0x38
 8000174:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLOCK_EN();
 8000176:	4b9f      	ldr	r3, [pc, #636]	; (80003f4 <main+0x284>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a9e      	ldr	r2, [pc, #632]	; (80003f4 <main+0x284>)
 800017c:	f043 0304 	orr.w	r3, r3, #4
 8000180:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_EN();
 8000182:	4b9c      	ldr	r3, [pc, #624]	; (80003f4 <main+0x284>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a9b      	ldr	r2, [pc, #620]	; (80003f4 <main+0x284>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLOCK_EN();
 800018e:	4b99      	ldr	r3, [pc, #612]	; (80003f4 <main+0x284>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	4a98      	ldr	r2, [pc, #608]	; (80003f4 <main+0x284>)
 8000194:	f043 0301 	orr.w	r3, r3, #1
 8000198:	6193      	str	r3, [r2, #24]
	keypad_Init();
 800019a:	f000 fb6d 	bl	8000878 <keypad_Init>
	Timer2_init();
 800019e:	f001 f907 	bl	80013b0 <Timer2_init>
	Servo1_Entry_Gate_Init();
 80001a2:	f001 f875 	bl	8001290 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 80001a6:	f001 f8bb 	bl	8001320 <Servo2_Exit_Gate_Init>
	 * PA11 CTC
	 * PA12 RTS
	 */
	USART_Config_t uartCFG;

	uartCFG.BaudRate = UART_BaudRate_115200;
 80001aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001ae:	623b      	str	r3, [r7, #32]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 80001b0:	2300      	movs	r3, #0
 80001b2:	857b      	strh	r3, [r7, #42]	; 0x2a
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80001b4:	2320      	movs	r3, #32
 80001b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uartCFG.P_IRQ_CallBack = RFID_CARD_Enter_CallBack;
 80001b8:	4b8f      	ldr	r3, [pc, #572]	; (80003f8 <main+0x288>)
 80001ba:	633b      	str	r3, [r7, #48]	; 0x30
	uartCFG.Parity = UART_Parity_NONE;
 80001bc:	2300      	movs	r3, #0
 80001be:	84fb      	strh	r3, [r7, #38]	; 0x26
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 80001c0:	2300      	movs	r3, #0
 80001c2:	84bb      	strh	r3, [r7, #36]	; 0x24
	uartCFG.StopBits = UART_StopBits_1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	853b      	strh	r3, [r7, #40]	; 0x28
	uartCFG.USART_Mode = UART_Mode_TX_RX;
 80001c8:	230c      	movs	r3, #12
 80001ca:	83bb      	strh	r3, [r7, #28]
	MCAL_UART_Init(USART1, &uartCFG);
 80001cc:	f107 031c 	add.w	r3, r7, #28
 80001d0:	4619      	mov	r1, r3
 80001d2:	488a      	ldr	r0, [pc, #552]	; (80003fc <main+0x28c>)
 80001d4:	f001 fbe6 	bl	80019a4 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001d8:	4888      	ldr	r0, [pc, #544]	; (80003fc <main+0x28c>)
 80001da:	f001 fdd3 	bl	8001d84 <MCAL_UART_GPIO_Set_Pins>
	 * PA0 ->CTS
	 * PA1 ->RTS
	 */
	USART_Config_t uart2CFG;

	uart2CFG.BaudRate = UART_BaudRate_115200;
 80001de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001e2:	60bb      	str	r3, [r7, #8]
	uart2CFG.HwFlowCtl = UART_HwFlowCtl_NONE;
 80001e4:	2300      	movs	r3, #0
 80001e6:	827b      	strh	r3, [r7, #18]
	uart2CFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 80001e8:	2320      	movs	r3, #32
 80001ea:	82bb      	strh	r3, [r7, #20]
	uart2CFG.P_IRQ_CallBack = RFID_CARD_EXIT_CallBack;
 80001ec:	4b84      	ldr	r3, [pc, #528]	; (8000400 <main+0x290>)
 80001ee:	61bb      	str	r3, [r7, #24]
	uart2CFG.Parity = UART_Parity_NONE;
 80001f0:	2300      	movs	r3, #0
 80001f2:	81fb      	strh	r3, [r7, #14]
	uart2CFG.Payload_Length = UART_Payload_Length_8B;
 80001f4:	2300      	movs	r3, #0
 80001f6:	81bb      	strh	r3, [r7, #12]
	uart2CFG.StopBits = UART_StopBits_1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	823b      	strh	r3, [r7, #16]
	uart2CFG.USART_Mode = UART_Mode_TX_RX;
 80001fc:	230c      	movs	r3, #12
 80001fe:	80bb      	strh	r3, [r7, #4]
	MCAL_UART_Init(USART2, &uart2CFG);
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4619      	mov	r1, r3
 8000204:	487f      	ldr	r0, [pc, #508]	; (8000404 <main+0x294>)
 8000206:	f001 fbcd 	bl	80019a4 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART2);
 800020a:	487e      	ldr	r0, [pc, #504]	; (8000404 <main+0x294>)
 800020c:	f001 fdba 	bl	8001d84 <MCAL_UART_GPIO_Set_Pins>

	lcd_init(&LCD1);
 8000210:	487d      	ldr	r0, [pc, #500]	; (8000408 <main+0x298>)
 8000212:	f000 fc27 	bl	8000a64 <lcd_init>
	lcd_init(&LCD2);
 8000216:	487d      	ldr	r0, [pc, #500]	; (800040c <main+0x29c>)
 8000218:	f000 fc24 	bl	8000a64 <lcd_init>
	LEDs_Init();
 800021c:	f000 f9ee 	bl	80005fc <LEDs_Init>
	PIRs_Init();
 8000220:	f000 fa0c 	bl	800063c <PIRs_Init>

	/*==========Enter IDs To Store In Array Pass==========*/
	Register_IDs_From_Admin();
 8000224:	f000 fa30 	bl	8000688 <Register_IDs_From_Admin>

	Welcome();
 8000228:	f000 f9a6 	bl	8000578 <Welcome>
	dms(200);
 800022c:	20c8      	movs	r0, #200	; 0xc8
 800022e:	f001 f8fb 	bl	8001428 <dms>
	LCD_Display_Empty_Slots();
 8000232:	f000 f9c1 	bl	80005b8 <LCD_Display_Empty_Slots>


	int i=0;
 8000236:	2300      	movs	r3, #0
 8000238:	637b      	str	r3, [r7, #52]	; 0x34
	while(1)
	{
		if(Available_Slots>'0')
 800023a:	4b75      	ldr	r3, [pc, #468]	; (8000410 <main+0x2a0>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b30      	cmp	r3, #48	; 0x30
 8000240:	d91b      	bls.n	800027a <main+0x10a>
		{
			lcd_set_position(&LCD2, 2, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2102      	movs	r1, #2
 8000246:	4871      	ldr	r0, [pc, #452]	; (800040c <main+0x29c>)
 8000248:	f000 ff5c 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Enter ID in");
 800024c:	4971      	ldr	r1, [pc, #452]	; (8000414 <main+0x2a4>)
 800024e:	486f      	ldr	r0, [pc, #444]	; (800040c <main+0x29c>)
 8000250:	f000 fe2c 	bl	8000eac <lcd_send_string>
			lcd_set_position(&LCD2,3,0 );
 8000254:	2200      	movs	r2, #0
 8000256:	2103      	movs	r1, #3
 8000258:	486c      	ldr	r0, [pc, #432]	; (800040c <main+0x29c>)
 800025a:	f000 ff53 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Card Reader");
 800025e:	496e      	ldr	r1, [pc, #440]	; (8000418 <main+0x2a8>)
 8000260:	486a      	ldr	r0, [pc, #424]	; (800040c <main+0x29c>)
 8000262:	f000 fe23 	bl	8000eac <lcd_send_string>
			while(RFID_CARD_Enter ==0 && RFID_CARD_EXIT==0); //Wait for Enter any id
 8000266:	bf00      	nop
 8000268:	4b6c      	ldr	r3, [pc, #432]	; (800041c <main+0x2ac>)
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d119      	bne.n	80002a4 <main+0x134>
 8000270:	4b6b      	ldr	r3, [pc, #428]	; (8000420 <main+0x2b0>)
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f7      	beq.n	8000268 <main+0xf8>
 8000278:	e014      	b.n	80002a4 <main+0x134>
		}
		else
		{
			lcd_clear(&LCD2);
 800027a:	4864      	ldr	r0, [pc, #400]	; (800040c <main+0x29c>)
 800027c:	f000 ffea 	bl	8001254 <lcd_clear>
			lcd_set_position(&LCD2, 0, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	2100      	movs	r1, #0
 8000284:	4861      	ldr	r0, [pc, #388]	; (800040c <main+0x29c>)
 8000286:	f000 ff3d 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Parking Is Full");
 800028a:	4966      	ldr	r1, [pc, #408]	; (8000424 <main+0x2b4>)
 800028c:	485f      	ldr	r0, [pc, #380]	; (800040c <main+0x29c>)
 800028e:	f000 fe0d 	bl	8000eac <lcd_send_string>
			lcd_set_position(&LCD2, 2, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2102      	movs	r1, #2
 8000296:	485d      	ldr	r0, [pc, #372]	; (800040c <main+0x29c>)
 8000298:	f000 ff34 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Entry Not Allowed");
 800029c:	4962      	ldr	r1, [pc, #392]	; (8000428 <main+0x2b8>)
 800029e:	485b      	ldr	r0, [pc, #364]	; (800040c <main+0x29c>)
 80002a0:	f000 fe04 	bl	8000eac <lcd_send_string>
		}

		for(i=0;i<3;i++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	637b      	str	r3, [r7, #52]	; 0x34
 80002a8:	e017      	b.n	80002da <main+0x16a>
		{
			if(RFID_CARD_Enter == pass[i] || RFID_CARD_EXIT == pass[i] )
 80002aa:	4a60      	ldr	r2, [pc, #384]	; (800042c <main+0x2bc>)
 80002ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	4b59      	ldr	r3, [pc, #356]	; (800041c <main+0x2ac>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d008      	beq.n	80002ce <main+0x15e>
 80002bc:	4a5b      	ldr	r2, [pc, #364]	; (800042c <main+0x2bc>)
 80002be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002c0:	4413      	add	r3, r2
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	b29a      	uxth	r2, r3
 80002c6:	4b56      	ldr	r3, [pc, #344]	; (8000420 <main+0x2b0>)
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d102      	bne.n	80002d4 <main+0x164>
			{
				Search_Done=1;
 80002ce:	4b58      	ldr	r3, [pc, #352]	; (8000430 <main+0x2c0>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	701a      	strb	r2, [r3, #0]
		for(i=0;i<3;i++)
 80002d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002d6:	3301      	adds	r3, #1
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
 80002da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002dc:	2b02      	cmp	r3, #2
 80002de:	dde4      	ble.n	80002aa <main+0x13a>
			}

		}
		/*=====================Enter gate=====================*/
		if(Search_Done == 1 && RFID_CARD_Enter !=0 && Available_Slots>'0')
 80002e0:	4b53      	ldr	r3, [pc, #332]	; (8000430 <main+0x2c0>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d150      	bne.n	800038a <main+0x21a>
 80002e8:	4b4c      	ldr	r3, [pc, #304]	; (800041c <main+0x2ac>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d04c      	beq.n	800038a <main+0x21a>
 80002f0:	4b47      	ldr	r3, [pc, #284]	; (8000410 <main+0x2a0>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b30      	cmp	r3, #48	; 0x30
 80002f6:	d948      	bls.n	800038a <main+0x21a>
		{
			lcd_clear(&LCD2);
 80002f8:	4844      	ldr	r0, [pc, #272]	; (800040c <main+0x29c>)
 80002fa:	f000 ffab 	bl	8001254 <lcd_clear>
			lcd_set_position(&LCD2, 2, 3);
 80002fe:	2203      	movs	r2, #3
 8000300:	2102      	movs	r1, #2
 8000302:	4842      	ldr	r0, [pc, #264]	; (800040c <main+0x29c>)
 8000304:	f000 fefe 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Right ID");
 8000308:	494a      	ldr	r1, [pc, #296]	; (8000434 <main+0x2c4>)
 800030a:	4840      	ldr	r0, [pc, #256]	; (800040c <main+0x29c>)
 800030c:	f000 fdce 	bl	8000eac <lcd_send_string>
			lcd_set_position(&LCD2, 3, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	2103      	movs	r1, #3
 8000314:	483d      	ldr	r0, [pc, #244]	; (800040c <main+0x29c>)
 8000316:	f000 fef5 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Entry gate Opens");
 800031a:	4947      	ldr	r1, [pc, #284]	; (8000438 <main+0x2c8>)
 800031c:	483b      	ldr	r0, [pc, #236]	; (800040c <main+0x29c>)
 800031e:	f000 fdc5 	bl	8000eac <lcd_send_string>

			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000328:	4844      	ldr	r0, [pc, #272]	; (800043c <main+0x2cc>)
 800032a:	f001 fab6 	bl	800189a <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(UP);
 800032e:	2001      	movs	r0, #1
 8000330:	f000 ffc4 	bl	80012bc <Servo1_Entry_Gate>
			Available_Slots--;
 8000334:	4b36      	ldr	r3, [pc, #216]	; (8000410 <main+0x2a0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	3b01      	subs	r3, #1
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b34      	ldr	r3, [pc, #208]	; (8000410 <main+0x2a0>)
 800033e:	701a      	strb	r2, [r3, #0]

			RFID_CARD_Enter =0;
 8000340:	4b36      	ldr	r3, [pc, #216]	; (800041c <main+0x2ac>)
 8000342:	2200      	movs	r2, #0
 8000344:	801a      	strh	r2, [r3, #0]
			Search_Done =0;
 8000346:	4b3a      	ldr	r3, [pc, #232]	; (8000430 <main+0x2c0>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]

			dms(300);
 800034c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000350:	f001 f86a 	bl	8001428 <dms>

			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)==1)
 8000354:	e002      	b.n	800035c <main+0x1ec>
			{
				dms(200);
 8000356:	20c8      	movs	r0, #200	; 0xc8
 8000358:	f001 f866 	bl	8001428 <dms>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)==1)
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	4837      	ldr	r0, [pc, #220]	; (800043c <main+0x2cc>)
 8000360:	f001 fa69 	bl	8001836 <MCAL_GPIO_ReadPin>
 8000364:	4603      	mov	r3, r0
 8000366:	2b01      	cmp	r3, #1
 8000368:	d0f5      	beq.n	8000356 <main+0x1e6>
			}


			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000370:	4832      	ldr	r0, [pc, #200]	; (800043c <main+0x2cc>)
 8000372:	f001 fa92 	bl	800189a <MCAL_GPIO_WritePin>
			Servo1_Entry_Gate(Down);
 8000376:	2002      	movs	r0, #2
 8000378:	f000 ffa0 	bl	80012bc <Servo1_Entry_Gate>


			Welcome();
 800037c:	f000 f8fc 	bl	8000578 <Welcome>
			dms(200);
 8000380:	20c8      	movs	r0, #200	; 0xc8
 8000382:	f001 f851 	bl	8001428 <dms>
			LCD_Display_Empty_Slots();
 8000386:	f000 f917 	bl	80005b8 <LCD_Display_Empty_Slots>

		}
		/*===================Exit gate====================*/
		if(Search_Done == 1 && RFID_CARD_EXIT !=0 && Available_Slots<'3')
 800038a:	4b29      	ldr	r3, [pc, #164]	; (8000430 <main+0x2c0>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d17a      	bne.n	8000488 <main+0x318>
 8000392:	4b23      	ldr	r3, [pc, #140]	; (8000420 <main+0x2b0>)
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d076      	beq.n	8000488 <main+0x318>
 800039a:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <main+0x2a0>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b32      	cmp	r3, #50	; 0x32
 80003a0:	d872      	bhi.n	8000488 <main+0x318>
		{
			lcd_clear(&LCD2);
 80003a2:	481a      	ldr	r0, [pc, #104]	; (800040c <main+0x29c>)
 80003a4:	f000 ff56 	bl	8001254 <lcd_clear>
			lcd_set_position(&LCD2, 2, 3);
 80003a8:	2203      	movs	r2, #3
 80003aa:	2102      	movs	r1, #2
 80003ac:	4817      	ldr	r0, [pc, #92]	; (800040c <main+0x29c>)
 80003ae:	f000 fea9 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Right ID!");
 80003b2:	4923      	ldr	r1, [pc, #140]	; (8000440 <main+0x2d0>)
 80003b4:	4815      	ldr	r0, [pc, #84]	; (800040c <main+0x29c>)
 80003b6:	f000 fd79 	bl	8000eac <lcd_send_string>
			lcd_set_position(&LCD2, 3, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2103      	movs	r1, #3
 80003be:	4813      	ldr	r0, [pc, #76]	; (800040c <main+0x29c>)
 80003c0:	f000 fea0 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Exit Gate Opens");
 80003c4:	491f      	ldr	r1, [pc, #124]	; (8000444 <main+0x2d4>)
 80003c6:	4811      	ldr	r0, [pc, #68]	; (800040c <main+0x29c>)
 80003c8:	f000 fd70 	bl	8000eac <lcd_send_string>

			//Green led*/
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d2:	481a      	ldr	r0, [pc, #104]	; (800043c <main+0x2cc>)
 80003d4:	f001 fa61 	bl	800189a <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(UP);
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 ffb7 	bl	800134c <Servo2_Exit_Gate>
			Available_Slots++;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <main+0x2a0>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	3301      	adds	r3, #1
 80003e4:	b2da      	uxtb	r2, r3
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <main+0x2a0>)
 80003e8:	701a      	strb	r2, [r3, #0]
			dms(300);
 80003ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003ee:	f001 f81b 	bl	8001428 <dms>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==1) //Read the PIR2 state
 80003f2:	e02c      	b.n	800044e <main+0x2de>
 80003f4:	40021000 	.word	0x40021000
 80003f8:	08000531 	.word	0x08000531
 80003fc:	40013800 	.word	0x40013800
 8000400:	08000555 	.word	0x08000555
 8000404:	40004400 	.word	0x40004400
 8000408:	20000004 	.word	0x20000004
 800040c:	20000018 	.word	0x20000018
 8000410:	20000000 	.word	0x20000000
 8000414:	08002010 	.word	0x08002010
 8000418:	0800201c 	.word	0x0800201c
 800041c:	20000068 	.word	0x20000068
 8000420:	2000006a 	.word	0x2000006a
 8000424:	08002028 	.word	0x08002028
 8000428:	08002038 	.word	0x08002038
 800042c:	20000058 	.word	0x20000058
 8000430:	2000005b 	.word	0x2000005b
 8000434:	0800204c 	.word	0x0800204c
 8000438:	08002058 	.word	0x08002058
 800043c:	40010800 	.word	0x40010800
 8000440:	0800206c 	.word	0x0800206c
 8000444:	08002078 	.word	0x08002078
			{
				dms(200);
 8000448:	20c8      	movs	r0, #200	; 0xc8
 800044a:	f000 ffed 	bl	8001428 <dms>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==1) //Read the PIR2 state
 800044e:	2102      	movs	r1, #2
 8000450:	4830      	ldr	r0, [pc, #192]	; (8000514 <main+0x3a4>)
 8000452:	f001 f9f0 	bl	8001836 <MCAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	2b01      	cmp	r3, #1
 800045a:	d0f5      	beq.n	8000448 <main+0x2d8>
			}
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000462:	482c      	ldr	r0, [pc, #176]	; (8000514 <main+0x3a4>)
 8000464:	f001 fa19 	bl	800189a <MCAL_GPIO_WritePin>
			Servo2_Exit_Gate(Down);
 8000468:	2002      	movs	r0, #2
 800046a:	f000 ff6f 	bl	800134c <Servo2_Exit_Gate>

			RFID_CARD_EXIT =0;
 800046e:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <main+0x3a8>)
 8000470:	2200      	movs	r2, #0
 8000472:	801a      	strh	r2, [r3, #0]
			Search_Done =0;
 8000474:	4b29      	ldr	r3, [pc, #164]	; (800051c <main+0x3ac>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]

			Welcome();
 800047a:	f000 f87d 	bl	8000578 <Welcome>
			dms(200);
 800047e:	20c8      	movs	r0, #200	; 0xc8
 8000480:	f000 ffd2 	bl	8001428 <dms>
			LCD_Display_Empty_Slots();
 8000484:	f000 f898 	bl	80005b8 <LCD_Display_Empty_Slots>
		}

		/*==================Wrong Id====================*/
		if(Search_Done == 0 && (RFID_CARD_Enter >0 || RFID_CARD_EXIT>0) )
 8000488:	4b24      	ldr	r3, [pc, #144]	; (800051c <main+0x3ac>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	f47f aed4 	bne.w	800023a <main+0xca>
 8000492:	4b23      	ldr	r3, [pc, #140]	; (8000520 <main+0x3b0>)
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d104      	bne.n	80004a4 <main+0x334>
 800049a:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <main+0x3a8>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	f43f aecb 	beq.w	800023a <main+0xca>
		{
			lcd_clear(&LCD2);
 80004a4:	481f      	ldr	r0, [pc, #124]	; (8000524 <main+0x3b4>)
 80004a6:	f000 fed5 	bl	8001254 <lcd_clear>
			lcd_set_position(&LCD2, 0, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	481d      	ldr	r0, [pc, #116]	; (8000524 <main+0x3b4>)
 80004b0:	f000 fe28 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Wrong ID!");
 80004b4:	491c      	ldr	r1, [pc, #112]	; (8000528 <main+0x3b8>)
 80004b6:	481b      	ldr	r0, [pc, #108]	; (8000524 <main+0x3b4>)
 80004b8:	f000 fcf8 	bl	8000eac <lcd_send_string>
			lcd_set_position(&LCD2, 2, 3);
 80004bc:	2203      	movs	r2, #3
 80004be:	2102      	movs	r1, #2
 80004c0:	4818      	ldr	r0, [pc, #96]	; (8000524 <main+0x3b4>)
 80004c2:	f000 fe1f 	bl	8001104 <lcd_set_position>
			lcd_send_string(&LCD2,"Try Again");
 80004c6:	4919      	ldr	r1, [pc, #100]	; (800052c <main+0x3bc>)
 80004c8:	4816      	ldr	r0, [pc, #88]	; (8000524 <main+0x3b4>)
 80004ca:	f000 fcef 	bl	8000eac <lcd_send_string>

			for(i=0;i<3;i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	637b      	str	r3, [r7, #52]	; 0x34
 80004d2:	e009      	b.n	80004e8 <main+0x378>
			{
				MCAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80004d4:	2101      	movs	r1, #1
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <main+0x3a4>)
 80004d8:	f001 f9f6 	bl	80018c8 <MCAL_GPIO_TogglePin>
				dms(150);
 80004dc:	2096      	movs	r0, #150	; 0x96
 80004de:	f000 ffa3 	bl	8001428 <dms>
			for(i=0;i<3;i++)
 80004e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004e4:	3301      	adds	r3, #1
 80004e6:	637b      	str	r3, [r7, #52]	; 0x34
 80004e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	ddf2      	ble.n	80004d4 <main+0x364>
			}
			MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1); //to ensure Red Led off after toggle
 80004ee:	2201      	movs	r2, #1
 80004f0:	2101      	movs	r1, #1
 80004f2:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x3a4>)
 80004f4:	f001 f9d1 	bl	800189a <MCAL_GPIO_WritePin>

			Welcome();
 80004f8:	f000 f83e 	bl	8000578 <Welcome>
			dms(150);
 80004fc:	2096      	movs	r0, #150	; 0x96
 80004fe:	f000 ff93 	bl	8001428 <dms>
			LCD_Display_Empty_Slots();
 8000502:	f000 f859 	bl	80005b8 <LCD_Display_Empty_Slots>
			RFID_CARD_EXIT =0;
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <main+0x3a8>)
 8000508:	2200      	movs	r2, #0
 800050a:	801a      	strh	r2, [r3, #0]
			RFID_CARD_Enter =0;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <main+0x3b0>)
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
		if(Available_Slots>'0')
 8000512:	e692      	b.n	800023a <main+0xca>
 8000514:	40010800 	.word	0x40010800
 8000518:	2000006a 	.word	0x2000006a
 800051c:	2000005b 	.word	0x2000005b
 8000520:	20000068 	.word	0x20000068
 8000524:	20000018 	.word	0x20000018
 8000528:	08002088 	.word	0x08002088
 800052c:	08002094 	.word	0x08002094

08000530 <RFID_CARD_Enter_CallBack>:
}


/*Call Back For UART*/
void RFID_CARD_Enter_CallBack(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &RFID_CARD_Enter, USART_disable);
 8000534:	2200      	movs	r2, #0
 8000536:	4905      	ldr	r1, [pc, #20]	; (800054c <RFID_CARD_Enter_CallBack+0x1c>)
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <RFID_CARD_Enter_CallBack+0x20>)
 800053a:	f001 fb6d 	bl	8001c18 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &RFID_CARD_Enter, USART_enable);
 800053e:	2201      	movs	r2, #1
 8000540:	4902      	ldr	r1, [pc, #8]	; (800054c <RFID_CARD_Enter_CallBack+0x1c>)
 8000542:	4803      	ldr	r0, [pc, #12]	; (8000550 <RFID_CARD_Enter_CallBack+0x20>)
 8000544:	f001 faf6 	bl	8001b34 <MCAL_UART_SendData>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000068 	.word	0x20000068
 8000550:	40013800 	.word	0x40013800

08000554 <RFID_CARD_EXIT_CallBack>:

void RFID_CARD_EXIT_CallBack(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART2, &RFID_CARD_EXIT, USART_disable);
 8000558:	2200      	movs	r2, #0
 800055a:	4905      	ldr	r1, [pc, #20]	; (8000570 <RFID_CARD_EXIT_CallBack+0x1c>)
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <RFID_CARD_EXIT_CallBack+0x20>)
 800055e:	f001 fb5b 	bl	8001c18 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART2, &RFID_CARD_EXIT, USART_enable);
 8000562:	2201      	movs	r2, #1
 8000564:	4902      	ldr	r1, [pc, #8]	; (8000570 <RFID_CARD_EXIT_CallBack+0x1c>)
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <RFID_CARD_EXIT_CallBack+0x20>)
 8000568:	f001 fae4 	bl	8001b34 <MCAL_UART_SendData>
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000006a 	.word	0x2000006a
 8000574:	40004400 	.word	0x40004400

08000578 <Welcome>:



void Welcome(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	lcd_clear(&LCD2);
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <Welcome+0x34>)
 800057e:	f000 fe69 	bl	8001254 <lcd_clear>
	lcd_set_position(&LCD2, 1, 1);
 8000582:	2201      	movs	r2, #1
 8000584:	2101      	movs	r1, #1
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <Welcome+0x34>)
 8000588:	f000 fdbc 	bl	8001104 <lcd_set_position>
	lcd_send_string(&LCD2,"Welcome in");
 800058c:	4908      	ldr	r1, [pc, #32]	; (80005b0 <Welcome+0x38>)
 800058e:	4807      	ldr	r0, [pc, #28]	; (80005ac <Welcome+0x34>)
 8000590:	f000 fc8c 	bl	8000eac <lcd_send_string>
	lcd_set_position(&LCD2,2,0 );
 8000594:	2200      	movs	r2, #0
 8000596:	2102      	movs	r1, #2
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <Welcome+0x34>)
 800059a:	f000 fdb3 	bl	8001104 <lcd_set_position>
	lcd_send_string(&LCD2,"Menna Parking");
 800059e:	4905      	ldr	r1, [pc, #20]	; (80005b4 <Welcome+0x3c>)
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <Welcome+0x34>)
 80005a2:	f000 fc83 	bl	8000eac <lcd_send_string>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000018 	.word	0x20000018
 80005b0:	080020a0 	.word	0x080020a0
 80005b4:	080020ac 	.word	0x080020ac

080005b8 <LCD_Display_Empty_Slots>:

void LCD_Display_Empty_Slots(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	lcd_clear(&LCD2);
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <LCD_Display_Empty_Slots+0x38>)
 80005be:	f000 fe49 	bl	8001254 <lcd_clear>
	lcd_set_position(&LCD2, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	480a      	ldr	r0, [pc, #40]	; (80005f0 <LCD_Display_Empty_Slots+0x38>)
 80005c8:	f000 fd9c 	bl	8001104 <lcd_set_position>
	lcd_send_string(&LCD2,"Empty Slots=");
 80005cc:	4909      	ldr	r1, [pc, #36]	; (80005f4 <LCD_Display_Empty_Slots+0x3c>)
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <LCD_Display_Empty_Slots+0x38>)
 80005d0:	f000 fc6c 	bl	8000eac <lcd_send_string>
	lcd_set_position(&LCD2, 0, 14);
 80005d4:	220e      	movs	r2, #14
 80005d6:	2100      	movs	r1, #0
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <LCD_Display_Empty_Slots+0x38>)
 80005da:	f000 fd93 	bl	8001104 <lcd_set_position>
	lcd_send_char(&LCD2,Available_Slots);
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <LCD_Display_Empty_Slots+0x40>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <LCD_Display_Empty_Slots+0x38>)
 80005e6:	f000 fb97 	bl	8000d18 <lcd_send_char>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000018 	.word	0x20000018
 80005f4:	080020bc 	.word	0x080020bc
 80005f8:	20000000 	.word	0x20000000

080005fc <LEDs_Init>:

void LEDs_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	//RED LED A0
	GPIO_PIN_CONFIG_T PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_0;
 8000602:	2301      	movs	r3, #1
 8000604:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000606:	2304      	movs	r3, #4
 8000608:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 800060a:	2301      	movs	r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <LEDs_Init+0x3c>)
 8000614:	f001 f893 	bl	800173e <MCAL_GPIO_Init>

	//GREEN LED A11
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_11;
 8000618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800061c:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800061e:	2304      	movs	r3, #4
 8000620:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 8000622:	2301      	movs	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <LEDs_Init+0x3c>)
 800062c:	f001 f887 	bl	800173e <MCAL_GPIO_Init>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40010800 	.word	0x40010800

0800063c <PIRs_Init>:

void PIRs_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	//PIR1 A7
	GPIO_PIN_CONFIG_T PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_7;
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8000646:	2302      	movs	r3, #2
 8000648:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <PIRs_Init+0x48>)
 8000650:	f001 f875 	bl	800173e <MCAL_GPIO_Init>

	//PIR2 A1
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_1;
 8000654:	2302      	movs	r3, #2
 8000656:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8000658:	2302      	movs	r3, #2
 800065a:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <PIRs_Init+0x48>)
 8000662:	f001 f86c 	bl	800173e <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	2101      	movs	r1, #1
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <PIRs_Init+0x48>)
 800066c:	f001 f915 	bl	800189a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000676:	4803      	ldr	r0, [pc, #12]	; (8000684 <PIRs_Init+0x48>)
 8000678:	f001 f90f 	bl	800189a <MCAL_GPIO_WritePin>

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40010800 	.word	0x40010800

08000688 <Register_IDs_From_Admin>:

void Register_IDs_From_Admin(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	lcd_send_command(&LCD1, display_on_cursor_off);
 800068c:	210c      	movs	r1, #12
 800068e:	485e      	ldr	r0, [pc, #376]	; (8000808 <Register_IDs_From_Admin+0x180>)
 8000690:	f000 fc6e 	bl	8000f70 <lcd_send_command>
	lcd_set_position(&LCD1, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	485b      	ldr	r0, [pc, #364]	; (8000808 <Register_IDs_From_Admin+0x180>)
 800069a:	f000 fd33 	bl	8001104 <lcd_set_position>
	lcd_send_string(&LCD1,"IDs of system");
 800069e:	495b      	ldr	r1, [pc, #364]	; (800080c <Register_IDs_From_Admin+0x184>)
 80006a0:	4859      	ldr	r0, [pc, #356]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80006a2:	f000 fc03 	bl	8000eac <lcd_send_string>
	lcd_set_position(&LCD1, 2, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	4857      	ldr	r0, [pc, #348]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80006ac:	f000 fd2a 	bl	8001104 <lcd_set_position>
	lcd_send_string(&LCD1,"First  ID:");
 80006b0:	4957      	ldr	r1, [pc, #348]	; (8000810 <Register_IDs_From_Admin+0x188>)
 80006b2:	4855      	ldr	r0, [pc, #340]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80006b4:	f000 fbfa 	bl	8000eac <lcd_send_string>
	while(keypad_Read()=='N');
 80006b8:	bf00      	nop
 80006ba:	f000 f92b 	bl	8000914 <keypad_Read>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b4e      	cmp	r3, #78	; 0x4e
 80006c2:	d0fa      	beq.n	80006ba <Register_IDs_From_Admin+0x32>
	pass[0]=keypad_Read();
 80006c4:	f000 f926 	bl	8000914 <keypad_Read>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	4b51      	ldr	r3, [pc, #324]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 80006ce:	701a      	strb	r2, [r3, #0]
	while(keypad_Read()!='N');
 80006d0:	bf00      	nop
 80006d2:	f000 f91f 	bl	8000914 <keypad_Read>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b4e      	cmp	r3, #78	; 0x4e
 80006da:	d1fa      	bne.n	80006d2 <Register_IDs_From_Admin+0x4a>
	lcd_set_position(&LCD1,14,1 );
 80006dc:	2201      	movs	r2, #1
 80006de:	210e      	movs	r1, #14
 80006e0:	4849      	ldr	r0, [pc, #292]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80006e2:	f000 fd0f 	bl	8001104 <lcd_set_position>
	lcd_send_char(&LCD1, pass[0]);
 80006e6:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4846      	ldr	r0, [pc, #280]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80006ee:	f000 fb13 	bl	8000d18 <lcd_send_char>
	lcd_send_command(&LCD1, display_on_cursor_off);
 80006f2:	210c      	movs	r1, #12
 80006f4:	4844      	ldr	r0, [pc, #272]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80006f6:	f000 fc3b 	bl	8000f70 <lcd_send_command>

	lcd_set_position(&LCD1, 3, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2103      	movs	r1, #3
 80006fe:	4842      	ldr	r0, [pc, #264]	; (8000808 <Register_IDs_From_Admin+0x180>)
 8000700:	f000 fd00 	bl	8001104 <lcd_set_position>
	lcd_send_string(&LCD1,"Second ID:");
 8000704:	4944      	ldr	r1, [pc, #272]	; (8000818 <Register_IDs_From_Admin+0x190>)
 8000706:	4840      	ldr	r0, [pc, #256]	; (8000808 <Register_IDs_From_Admin+0x180>)
 8000708:	f000 fbd0 	bl	8000eac <lcd_send_string>
	while(keypad_Read()=='N');
 800070c:	bf00      	nop
 800070e:	f000 f901 	bl	8000914 <keypad_Read>
 8000712:	4603      	mov	r3, r0
 8000714:	2b4e      	cmp	r3, #78	; 0x4e
 8000716:	d0fa      	beq.n	800070e <Register_IDs_From_Admin+0x86>
	pass[1]=keypad_Read();
 8000718:	f000 f8fc 	bl	8000914 <keypad_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 8000722:	705a      	strb	r2, [r3, #1]
	while(keypad_Read()!='N');
 8000724:	bf00      	nop
 8000726:	f000 f8f5 	bl	8000914 <keypad_Read>
 800072a:	4603      	mov	r3, r0
 800072c:	2b4e      	cmp	r3, #78	; 0x4e
 800072e:	d1fa      	bne.n	8000726 <Register_IDs_From_Admin+0x9e>
	lcd_set_position(&LCD1, 10,2);
 8000730:	2202      	movs	r2, #2
 8000732:	210a      	movs	r1, #10
 8000734:	4834      	ldr	r0, [pc, #208]	; (8000808 <Register_IDs_From_Admin+0x180>)
 8000736:	f000 fce5 	bl	8001104 <lcd_set_position>
	lcd_send_char(&LCD1, pass[1]);
 800073a:	4b36      	ldr	r3, [pc, #216]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	4619      	mov	r1, r3
 8000740:	4831      	ldr	r0, [pc, #196]	; (8000808 <Register_IDs_From_Admin+0x180>)
 8000742:	f000 fae9 	bl	8000d18 <lcd_send_char>
	lcd_send_command(&LCD1, display_on_cursor_off);
 8000746:	210c      	movs	r1, #12
 8000748:	482f      	ldr	r0, [pc, #188]	; (8000808 <Register_IDs_From_Admin+0x180>)
 800074a:	f000 fc11 	bl	8000f70 <lcd_send_command>

	lcd_set_position(&LCD1, 4, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2104      	movs	r1, #4
 8000752:	482d      	ldr	r0, [pc, #180]	; (8000808 <Register_IDs_From_Admin+0x180>)
 8000754:	f000 fcd6 	bl	8001104 <lcd_set_position>
	lcd_send_string(&LCD1,"Third  ID:");
 8000758:	4930      	ldr	r1, [pc, #192]	; (800081c <Register_IDs_From_Admin+0x194>)
 800075a:	482b      	ldr	r0, [pc, #172]	; (8000808 <Register_IDs_From_Admin+0x180>)
 800075c:	f000 fba6 	bl	8000eac <lcd_send_string>
	while(keypad_Read()=='N');
 8000760:	bf00      	nop
 8000762:	f000 f8d7 	bl	8000914 <keypad_Read>
 8000766:	4603      	mov	r3, r0
 8000768:	2b4e      	cmp	r3, #78	; 0x4e
 800076a:	d0fa      	beq.n	8000762 <Register_IDs_From_Admin+0xda>
	pass[2]=keypad_Read();
 800076c:	f000 f8d2 	bl	8000914 <keypad_Read>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 8000776:	709a      	strb	r2, [r3, #2]
	while(keypad_Read()!='N');
 8000778:	bf00      	nop
 800077a:	f000 f8cb 	bl	8000914 <keypad_Read>
 800077e:	4603      	mov	r3, r0
 8000780:	2b4e      	cmp	r3, #78	; 0x4e
 8000782:	d1fa      	bne.n	800077a <Register_IDs_From_Admin+0xf2>
	lcd_set_position(&LCD1, 10,3 );
 8000784:	2203      	movs	r2, #3
 8000786:	210a      	movs	r1, #10
 8000788:	481f      	ldr	r0, [pc, #124]	; (8000808 <Register_IDs_From_Admin+0x180>)
 800078a:	f000 fcbb 	bl	8001104 <lcd_set_position>
	lcd_send_char(&LCD1, pass[2]);
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 8000790:	789b      	ldrb	r3, [r3, #2]
 8000792:	4619      	mov	r1, r3
 8000794:	481c      	ldr	r0, [pc, #112]	; (8000808 <Register_IDs_From_Admin+0x180>)
 8000796:	f000 fabf 	bl	8000d18 <lcd_send_char>
	lcd_send_command(&LCD1, display_on_cursor_off);
 800079a:	210c      	movs	r1, #12
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <Register_IDs_From_Admin+0x180>)
 800079e:	f000 fbe7 	bl	8000f70 <lcd_send_command>


	lcd_clear(&LCD1);
 80007a2:	4819      	ldr	r0, [pc, #100]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007a4:	f000 fd56 	bl	8001254 <lcd_clear>
	lcd_set_position(&LCD1, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007ae:	f000 fca9 	bl	8001104 <lcd_set_position>
	lcd_send_string(&LCD1,"IDs are Stored");
 80007b2:	491b      	ldr	r1, [pc, #108]	; (8000820 <Register_IDs_From_Admin+0x198>)
 80007b4:	4814      	ldr	r0, [pc, #80]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007b6:	f000 fb79 	bl	8000eac <lcd_send_string>
	lcd_send_command(&LCD1, display_on_cursor_off);
 80007ba:	210c      	movs	r1, #12
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007be:	f000 fbd7 	bl	8000f70 <lcd_send_command>

	lcd_set_position(&LCD1, 2, 4);
 80007c2:	2204      	movs	r2, #4
 80007c4:	2102      	movs	r1, #2
 80007c6:	4810      	ldr	r0, [pc, #64]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007c8:	f000 fc9c 	bl	8001104 <lcd_set_position>
	lcd_send_char(&LCD1, pass[0]);
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007d4:	f000 faa0 	bl	8000d18 <lcd_send_char>
	lcd_set_position(&LCD1, 2, 8);
 80007d8:	2208      	movs	r2, #8
 80007da:	2102      	movs	r1, #2
 80007dc:	480a      	ldr	r0, [pc, #40]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007de:	f000 fc91 	bl	8001104 <lcd_set_position>
	lcd_send_char(&LCD1, pass[1]);
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 80007e4:	785b      	ldrb	r3, [r3, #1]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007ea:	f000 fa95 	bl	8000d18 <lcd_send_char>
	lcd_set_position(&LCD1, 2, 12);
 80007ee:	220c      	movs	r2, #12
 80007f0:	2102      	movs	r1, #2
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <Register_IDs_From_Admin+0x180>)
 80007f4:	f000 fc86 	bl	8001104 <lcd_set_position>
	lcd_send_char(&LCD1, pass[2]);
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <Register_IDs_From_Admin+0x18c>)
 80007fa:	789b      	ldrb	r3, [r3, #2]
 80007fc:	4619      	mov	r1, r3
 80007fe:	4802      	ldr	r0, [pc, #8]	; (8000808 <Register_IDs_From_Admin+0x180>)
 8000800:	f000 fa8a 	bl	8000d18 <lcd_send_char>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000004 	.word	0x20000004
 800080c:	080020cc 	.word	0x080020cc
 8000810:	080020dc 	.word	0x080020dc
 8000814:	20000058 	.word	0x20000058
 8000818:	080020e8 	.word	0x080020e8
 800081c:	080020f4 	.word	0x080020f4
 8000820:	08002100 	.word	0x08002100

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000828:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000852:	f001 fbad 	bl	8001fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fc8b 	bl	8000170 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   r0, =_estack
 800085c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000868:	08002130 	.word	0x08002130
  ldr r2, =_sbss
 800086c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000870:	200000ac 	.word	0x200000ac

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <keypad_Init>:
 *      Author: MENNA
 */
#include "KEYPAD.h"

void keypad_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

	GPIO_PIN_CONFIG_T PinCinfg;

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_0;
 800087e:	2301      	movs	r3, #1
 8000880:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8000882:	2302      	movs	r3, #2
 8000884:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <keypad_Init+0x98>)
 800088c:	f000 ff57 	bl	800173e <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_1;
 8000890:	2302      	movs	r3, #2
 8000892:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 8000894:	2302      	movs	r3, #2
 8000896:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	481c      	ldr	r0, [pc, #112]	; (8000910 <keypad_Init+0x98>)
 800089e:	f000 ff4e 	bl	800173e <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_3;
 80008a2:	2308      	movs	r3, #8
 80008a4:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80008a6:	2302      	movs	r3, #2
 80008a8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4818      	ldr	r0, [pc, #96]	; (8000910 <keypad_Init+0x98>)
 80008b0:	f000 ff45 	bl	800173e <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_4;
 80008b4:	2310      	movs	r3, #16
 80008b6:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_INPUT_PU;
 80008b8:	2302      	movs	r3, #2
 80008ba:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4813      	ldr	r0, [pc, #76]	; (8000910 <keypad_Init+0x98>)
 80008c2:	f000 ff3c 	bl	800173e <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_5;
 80008c6:	2320      	movs	r3, #32
 80008c8:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008ca:	2304      	movs	r3, #4
 80008cc:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 80008ce:	2301      	movs	r3, #1
 80008d0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	480e      	ldr	r0, [pc, #56]	; (8000910 <keypad_Init+0x98>)
 80008d8:	f000 ff31 	bl	800173e <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_6;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008e0:	2304      	movs	r3, #4
 80008e2:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 80008e4:	2301      	movs	r3, #1
 80008e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <keypad_Init+0x98>)
 80008ee:	f000 ff26 	bl	800173e <MCAL_GPIO_Init>

	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_7;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008f6:	2304      	movs	r3, #4
 80008f8:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 80008fa:	2301      	movs	r3, #1
 80008fc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <keypad_Init+0x98>)
 8000904:	f000 ff1b 	bl	800173e <MCAL_GPIO_Init>

}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40010c00 	.word	0x40010c00

08000914 <keypad_Read>:

char keypad_Read(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePort(GPIOB, 0x0020);// Make Pin B5 High
 8000918:	2120      	movs	r1, #32
 800091a:	4843      	ldr	r0, [pc, #268]	; (8000a28 <keypad_Read+0x114>)
 800091c:	f000 ffaf 	bl	800187e <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '*';
 8000920:	4841      	ldr	r0, [pc, #260]	; (8000a28 <keypad_Read+0x114>)
 8000922:	f000 ff9f 	bl	8001864 <MCAL_GPIO_ReadPort>
 8000926:	4603      	mov	r3, r0
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <keypad_Read+0x20>
 8000930:	232a      	movs	r3, #42	; 0x2a
 8000932:	e076      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '7';
 8000934:	483c      	ldr	r0, [pc, #240]	; (8000a28 <keypad_Read+0x114>)
 8000936:	f000 ff95 	bl	8001864 <MCAL_GPIO_ReadPort>
 800093a:	4603      	mov	r3, r0
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <keypad_Read+0x34>
 8000944:	2337      	movs	r3, #55	; 0x37
 8000946:	e06c      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '4';
 8000948:	4837      	ldr	r0, [pc, #220]	; (8000a28 <keypad_Read+0x114>)
 800094a:	f000 ff8b 	bl	8001864 <MCAL_GPIO_ReadPort>
 800094e:	4603      	mov	r3, r0
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <keypad_Read+0x48>
 8000958:	2334      	movs	r3, #52	; 0x34
 800095a:	e062      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '1';
 800095c:	4832      	ldr	r0, [pc, #200]	; (8000a28 <keypad_Read+0x114>)
 800095e:	f000 ff81 	bl	8001864 <MCAL_GPIO_ReadPort>
 8000962:	4603      	mov	r3, r0
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <keypad_Read+0x5c>
 800096c:	2331      	movs	r3, #49	; 0x31
 800096e:	e058      	b.n	8000a22 <keypad_Read+0x10e>


	MCAL_GPIO_WritePort(GPIOB, 0x0040); // Make Pin B6 High
 8000970:	2140      	movs	r1, #64	; 0x40
 8000972:	482d      	ldr	r0, [pc, #180]	; (8000a28 <keypad_Read+0x114>)
 8000974:	f000 ff83 	bl	800187e <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '0';
 8000978:	482b      	ldr	r0, [pc, #172]	; (8000a28 <keypad_Read+0x114>)
 800097a:	f000 ff73 	bl	8001864 <MCAL_GPIO_ReadPort>
 800097e:	4603      	mov	r3, r0
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <keypad_Read+0x78>
 8000988:	2330      	movs	r3, #48	; 0x30
 800098a:	e04a      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '8';
 800098c:	4826      	ldr	r0, [pc, #152]	; (8000a28 <keypad_Read+0x114>)
 800098e:	f000 ff69 	bl	8001864 <MCAL_GPIO_ReadPort>
 8000992:	4603      	mov	r3, r0
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <keypad_Read+0x8c>
 800099c:	2338      	movs	r3, #56	; 0x38
 800099e:	e040      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '5';
 80009a0:	4821      	ldr	r0, [pc, #132]	; (8000a28 <keypad_Read+0x114>)
 80009a2:	f000 ff5f 	bl	8001864 <MCAL_GPIO_ReadPort>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <keypad_Read+0xa0>
 80009b0:	2335      	movs	r3, #53	; 0x35
 80009b2:	e036      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '2';
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <keypad_Read+0x114>)
 80009b6:	f000 ff55 	bl	8001864 <MCAL_GPIO_ReadPort>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <keypad_Read+0xb4>
 80009c4:	2332      	movs	r3, #50	; 0x32
 80009c6:	e02c      	b.n	8000a22 <keypad_Read+0x10e>

	MCAL_GPIO_WritePort(GPIOB, 0x0080); // Make Pin B7 High
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	4817      	ldr	r0, [pc, #92]	; (8000a28 <keypad_Read+0x114>)
 80009cc:	f000 ff57 	bl	800187e <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) return '#';
 80009d0:	4815      	ldr	r0, [pc, #84]	; (8000a28 <keypad_Read+0x114>)
 80009d2:	f000 ff47 	bl	8001864 <MCAL_GPIO_ReadPort>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <keypad_Read+0xd0>
 80009e0:	2323      	movs	r3, #35	; 0x23
 80009e2:	e01e      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) return '9';
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <keypad_Read+0x114>)
 80009e6:	f000 ff3d 	bl	8001864 <MCAL_GPIO_ReadPort>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <keypad_Read+0xe4>
 80009f4:	2339      	movs	r3, #57	; 0x39
 80009f6:	e014      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) return '6';
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <keypad_Read+0x114>)
 80009fa:	f000 ff33 	bl	8001864 <MCAL_GPIO_ReadPort>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <keypad_Read+0xf8>
 8000a08:	2336      	movs	r3, #54	; 0x36
 8000a0a:	e00a      	b.n	8000a22 <keypad_Read+0x10e>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) return '3';
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <keypad_Read+0x114>)
 8000a0e:	f000 ff29 	bl	8001864 <MCAL_GPIO_ReadPort>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <keypad_Read+0x10c>
 8000a1c:	2333      	movs	r3, #51	; 0x33
 8000a1e:	e000      	b.n	8000a22 <keypad_Read+0x10e>


	return 'N';
 8000a20:	234e      	movs	r3, #78	; 0x4e
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <delay_ms>:
GPIO_PIN_CONFIG_T pin_cfg;
uint16_t LCD_data_pins[] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,
							GPIO_PIN_12,GPIO_PIN_13,GPIO_PIN_14,GPIO_PIN_15};

void delay_ms(uint32_t time)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<time; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e00b      	b.n	8000a52 <delay_ms+0x26>
		for(j=0; j<255; j++);
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	e002      	b.n	8000a46 <delay_ms+0x1a>
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2bfe      	cmp	r3, #254	; 0xfe
 8000a4a:	d9f9      	bls.n	8000a40 <delay_ms+0x14>
	for(i=0; i<time; i++)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d3ef      	bcc.n	8000a3a <delay_ms+0xe>
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <lcd_init>:

void lcd_init(LCD_Pins_Config_t * Lcd_No)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	//delay_ms(20);
	dms(10);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f000 fcdb 	bl	8001428 <dms>
	//LCD data set as output
	int i;
	if(Lcd_No == &LCD1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a86      	ldr	r2, [pc, #536]	; (8000c90 <lcd_init+0x22c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d15d      	bne.n	8000b36 <lcd_init+0xd2>
	{
		for(i=4; i<8; i++)
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	e014      	b.n	8000aaa <lcd_init+0x46>
		{
			pin_cfg.GPIO_PIN_NUMBER= LCD_data_pins[i];
 8000a80:	4a84      	ldr	r2, [pc, #528]	; (8000c94 <lcd_init+0x230>)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a88:	4b83      	ldr	r3, [pc, #524]	; (8000c98 <lcd_init+0x234>)
 8000a8a:	801a      	strh	r2, [r3, #0]
			pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000a8c:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <lcd_init+0x234>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	709a      	strb	r2, [r3, #2]
			pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000a92:	4b81      	ldr	r3, [pc, #516]	; (8000c98 <lcd_init+0x234>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_Init(LCD1.lcd_data_dir, &pin_cfg);
 8000a98:	4b7d      	ldr	r3, [pc, #500]	; (8000c90 <lcd_init+0x22c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	497e      	ldr	r1, [pc, #504]	; (8000c98 <lcd_init+0x234>)
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fe4d 	bl	800173e <MCAL_GPIO_Init>
		for(i=4; i<8; i++)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	dde7      	ble.n	8000a80 <lcd_init+0x1c>
		}

		//set RS SWITCH as output
		pin_cfg.GPIO_PIN_NUMBER = LCD1.RS;
 8000ab0:	4b77      	ldr	r3, [pc, #476]	; (8000c90 <lcd_init+0x22c>)
 8000ab2:	8a1a      	ldrh	r2, [r3, #16]
 8000ab4:	4b78      	ldr	r3, [pc, #480]	; (8000c98 <lcd_init+0x234>)
 8000ab6:	801a      	strh	r2, [r3, #0]
		pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ab8:	4b77      	ldr	r3, [pc, #476]	; (8000c98 <lcd_init+0x234>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	709a      	strb	r2, [r3, #2]
		pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000abe:	4b76      	ldr	r3, [pc, #472]	; (8000c98 <lcd_init+0x234>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD1.lcd_ctrl_dir, &pin_cfg);
 8000ac4:	4b72      	ldr	r3, [pc, #456]	; (8000c90 <lcd_init+0x22c>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	4973      	ldr	r1, [pc, #460]	; (8000c98 <lcd_init+0x234>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 fe37 	bl	800173e <MCAL_GPIO_Init>
		//set ENABLE SWITCH as output
		pin_cfg.GPIO_PIN_NUMBER = LCD1.EN;
 8000ad0:	4b6f      	ldr	r3, [pc, #444]	; (8000c90 <lcd_init+0x22c>)
 8000ad2:	8a5a      	ldrh	r2, [r3, #18]
 8000ad4:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <lcd_init+0x234>)
 8000ad6:	801a      	strh	r2, [r3, #0]
		pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000ad8:	4b6f      	ldr	r3, [pc, #444]	; (8000c98 <lcd_init+0x234>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	709a      	strb	r2, [r3, #2]
		pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000ade:	4b6e      	ldr	r3, [pc, #440]	; (8000c98 <lcd_init+0x234>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD1.lcd_ctrl_dir, &pin_cfg);
 8000ae4:	4b6a      	ldr	r3, [pc, #424]	; (8000c90 <lcd_init+0x22c>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	496b      	ldr	r1, [pc, #428]	; (8000c98 <lcd_init+0x234>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fe27 	bl	800173e <MCAL_GPIO_Init>
		//clear RS,RW,EN
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_RESET);
 8000af0:	4b67      	ldr	r3, [pc, #412]	; (8000c90 <lcd_init+0x22c>)
 8000af2:	68d8      	ldr	r0, [r3, #12]
 8000af4:	4b66      	ldr	r3, [pc, #408]	; (8000c90 <lcd_init+0x22c>)
 8000af6:	8a1b      	ldrh	r3, [r3, #16]
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	f000 fecd 	bl	800189a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.EN, GPIO_PIN_RESET);
 8000b00:	4b63      	ldr	r3, [pc, #396]	; (8000c90 <lcd_init+0x22c>)
 8000b02:	68d8      	ldr	r0, [r3, #12]
 8000b04:	4b62      	ldr	r3, [pc, #392]	; (8000c90 <lcd_init+0x22c>)
 8000b06:	8a5b      	ldrh	r3, [r3, #18]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f000 fec5 	bl	800189a <MCAL_GPIO_WritePin>

		lcd_send_command(&LCD1,0x30);
 8000b10:	2130      	movs	r1, #48	; 0x30
 8000b12:	485f      	ldr	r0, [pc, #380]	; (8000c90 <lcd_init+0x22c>)
 8000b14:	f000 fa2c 	bl	8000f70 <lcd_send_command>
		delay_ms(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f7ff ff87 	bl	8000a2c <delay_ms>
		lcd_send_command(&LCD1,0x30);
 8000b1e:	2130      	movs	r1, #48	; 0x30
 8000b20:	485b      	ldr	r0, [pc, #364]	; (8000c90 <lcd_init+0x22c>)
 8000b22:	f000 fa25 	bl	8000f70 <lcd_send_command>
		delay_ms(1);
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff ff80 	bl	8000a2c <delay_ms>
		lcd_send_command(&LCD1,0x30);
 8000b2c:	2130      	movs	r1, #48	; 0x30
 8000b2e:	4858      	ldr	r0, [pc, #352]	; (8000c90 <lcd_init+0x22c>)
 8000b30:	f000 fa1e 	bl	8000f70 <lcd_send_command>
 8000b34:	e060      	b.n	8000bf8 <lcd_init+0x194>
	}
	else if(Lcd_No == &LCD2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a58      	ldr	r2, [pc, #352]	; (8000c9c <lcd_init+0x238>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d15c      	bne.n	8000bf8 <lcd_init+0x194>
	{
		for(i=4; i<8; i++)
 8000b3e:	2304      	movs	r3, #4
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e014      	b.n	8000b6e <lcd_init+0x10a>
		{
			pin_cfg.GPIO_PIN_NUMBER= LCD_data_pins[i];
 8000b44:	4a53      	ldr	r2, [pc, #332]	; (8000c94 <lcd_init+0x230>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b4c:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <lcd_init+0x234>)
 8000b4e:	801a      	strh	r2, [r3, #0]
			pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b50:	4b51      	ldr	r3, [pc, #324]	; (8000c98 <lcd_init+0x234>)
 8000b52:	2204      	movs	r2, #4
 8000b54:	709a      	strb	r2, [r3, #2]
			pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000b56:	4b50      	ldr	r3, [pc, #320]	; (8000c98 <lcd_init+0x234>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	70da      	strb	r2, [r3, #3]
			MCAL_GPIO_Init(LCD2.lcd_data_dir, &pin_cfg);
 8000b5c:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <lcd_init+0x238>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	494d      	ldr	r1, [pc, #308]	; (8000c98 <lcd_init+0x234>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fdeb 	bl	800173e <MCAL_GPIO_Init>
		for(i=4; i<8; i++)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2b07      	cmp	r3, #7
 8000b72:	dde7      	ble.n	8000b44 <lcd_init+0xe0>
		}

		//set RS SWITCH as output
		pin_cfg.GPIO_PIN_NUMBER = LCD2.RS;
 8000b74:	4b49      	ldr	r3, [pc, #292]	; (8000c9c <lcd_init+0x238>)
 8000b76:	8a1a      	ldrh	r2, [r3, #16]
 8000b78:	4b47      	ldr	r3, [pc, #284]	; (8000c98 <lcd_init+0x234>)
 8000b7a:	801a      	strh	r2, [r3, #0]
		pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b7c:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <lcd_init+0x234>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	709a      	strb	r2, [r3, #2]
		pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000b82:	4b45      	ldr	r3, [pc, #276]	; (8000c98 <lcd_init+0x234>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD2.lcd_ctrl_dir, &pin_cfg);
 8000b88:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <lcd_init+0x238>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	4942      	ldr	r1, [pc, #264]	; (8000c98 <lcd_init+0x234>)
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 fdd5 	bl	800173e <MCAL_GPIO_Init>
		//set ENABLE SWITCH as output
		pin_cfg.GPIO_PIN_NUMBER = LCD2.EN;
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <lcd_init+0x238>)
 8000b96:	8a5a      	ldrh	r2, [r3, #18]
 8000b98:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <lcd_init+0x234>)
 8000b9a:	801a      	strh	r2, [r3, #0]
		pin_cfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000b9c:	4b3e      	ldr	r3, [pc, #248]	; (8000c98 <lcd_init+0x234>)
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	709a      	strb	r2, [r3, #2]
		pin_cfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <lcd_init+0x234>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(LCD2.lcd_ctrl_dir, &pin_cfg);
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <lcd_init+0x238>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	493a      	ldr	r1, [pc, #232]	; (8000c98 <lcd_init+0x234>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fdc5 	bl	800173e <MCAL_GPIO_Init>
		//clear RS,RW,EN
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_RESET);
 8000bb4:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <lcd_init+0x238>)
 8000bb6:	68d8      	ldr	r0, [r3, #12]
 8000bb8:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <lcd_init+0x238>)
 8000bba:	8a1b      	ldrh	r3, [r3, #16]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f000 fe6b 	bl	800189a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.EN, GPIO_PIN_RESET);
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <lcd_init+0x238>)
 8000bc6:	68d8      	ldr	r0, [r3, #12]
 8000bc8:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <lcd_init+0x238>)
 8000bca:	8a5b      	ldrh	r3, [r3, #18]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f000 fe63 	bl	800189a <MCAL_GPIO_WritePin>

		lcd_send_command(&LCD2,0x30);
 8000bd4:	2130      	movs	r1, #48	; 0x30
 8000bd6:	4831      	ldr	r0, [pc, #196]	; (8000c9c <lcd_init+0x238>)
 8000bd8:	f000 f9ca 	bl	8000f70 <lcd_send_command>
		delay_ms(10);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f7ff ff25 	bl	8000a2c <delay_ms>
		lcd_send_command(&LCD2,0x30);
 8000be2:	2130      	movs	r1, #48	; 0x30
 8000be4:	482d      	ldr	r0, [pc, #180]	; (8000c9c <lcd_init+0x238>)
 8000be6:	f000 f9c3 	bl	8000f70 <lcd_send_command>
		delay_ms(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ff1e 	bl	8000a2c <delay_ms>
		lcd_send_command(&LCD2,0x30);
 8000bf0:	2130      	movs	r1, #48	; 0x30
 8000bf2:	482a      	ldr	r0, [pc, #168]	; (8000c9c <lcd_init+0x238>)
 8000bf4:	f000 f9bc 	bl	8000f70 <lcd_send_command>
	lcd_write_command(function_set_8bit);
#endif

#ifdef FOUR_BIT_MODE
	//select 4-bit mode
	if(Lcd_No == &LCD1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <lcd_init+0x22c>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d10c      	bne.n	8000c1a <lcd_init+0x1b6>
	{
		lcd_send_command(&LCD1,0x02);
 8000c00:	2102      	movs	r1, #2
 8000c02:	4823      	ldr	r0, [pc, #140]	; (8000c90 <lcd_init+0x22c>)
 8000c04:	f000 f9b4 	bl	8000f70 <lcd_send_command>
		lcd_send_command(&LCD1,function_set_4bit);
 8000c08:	2128      	movs	r1, #40	; 0x28
 8000c0a:	4821      	ldr	r0, [pc, #132]	; (8000c90 <lcd_init+0x22c>)
 8000c0c:	f000 f9b0 	bl	8000f70 <lcd_send_command>
		lcd_send_command(&LCD1,0x08);
 8000c10:	2108      	movs	r1, #8
 8000c12:	481f      	ldr	r0, [pc, #124]	; (8000c90 <lcd_init+0x22c>)
 8000c14:	f000 f9ac 	bl	8000f70 <lcd_send_command>
 8000c18:	e00f      	b.n	8000c3a <lcd_init+0x1d6>
	}
	else if(Lcd_No == &LCD2)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <lcd_init+0x238>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10b      	bne.n	8000c3a <lcd_init+0x1d6>
	{
		lcd_send_command(&LCD2,0x02);
 8000c22:	2102      	movs	r1, #2
 8000c24:	481d      	ldr	r0, [pc, #116]	; (8000c9c <lcd_init+0x238>)
 8000c26:	f000 f9a3 	bl	8000f70 <lcd_send_command>
		lcd_send_command(&LCD2,function_set_4bit);
 8000c2a:	2128      	movs	r1, #40	; 0x28
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <lcd_init+0x238>)
 8000c2e:	f000 f99f 	bl	8000f70 <lcd_send_command>
		lcd_send_command(&LCD2,0x08);
 8000c32:	2108      	movs	r1, #8
 8000c34:	4819      	ldr	r0, [pc, #100]	; (8000c9c <lcd_init+0x238>)
 8000c36:	f000 f99b 	bl	8000f70 <lcd_send_command>
	}

#endif
	if(Lcd_No == &LCD1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <lcd_init+0x22c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10f      	bne.n	8000c62 <lcd_init+0x1fe>
	{
		//display off
		lcd_send_command(&LCD1,display_off_cursor_off);
 8000c42:	2108      	movs	r1, #8
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <lcd_init+0x22c>)
 8000c46:	f000 f993 	bl	8000f70 <lcd_send_command>
		//clear display
		lcd_clear(&LCD1);
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <lcd_init+0x22c>)
 8000c4c:	f000 fb02 	bl	8001254 <lcd_clear>
		//entry mode set
		lcd_send_command(&LCD1,Entry_mode);
 8000c50:	2106      	movs	r1, #6
 8000c52:	480f      	ldr	r0, [pc, #60]	; (8000c90 <lcd_init+0x22c>)
 8000c54:	f000 f98c 	bl	8000f70 <lcd_send_command>
		//display on cursor blinking
		lcd_send_command(&LCD1,Display_on_Cursor_blinking);
 8000c58:	210f      	movs	r1, #15
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <lcd_init+0x22c>)
 8000c5c:	f000 f988 	bl	8000f70 <lcd_send_command>
		lcd_send_command(&LCD2,Entry_mode);
		//display on cursor blinking
		lcd_send_command(&LCD2,Display_on_Cursor_blinking);
	}

}
 8000c60:	e012      	b.n	8000c88 <lcd_init+0x224>
	else if(Lcd_No == &LCD2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <lcd_init+0x238>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d10e      	bne.n	8000c88 <lcd_init+0x224>
		lcd_send_command(&LCD2,display_off_cursor_off);
 8000c6a:	2108      	movs	r1, #8
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <lcd_init+0x238>)
 8000c6e:	f000 f97f 	bl	8000f70 <lcd_send_command>
		lcd_clear(&LCD2);
 8000c72:	480a      	ldr	r0, [pc, #40]	; (8000c9c <lcd_init+0x238>)
 8000c74:	f000 faee 	bl	8001254 <lcd_clear>
		lcd_send_command(&LCD2,Entry_mode);
 8000c78:	2106      	movs	r1, #6
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <lcd_init+0x238>)
 8000c7c:	f000 f978 	bl	8000f70 <lcd_send_command>
		lcd_send_command(&LCD2,Display_on_Cursor_blinking);
 8000c80:	210f      	movs	r1, #15
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <lcd_init+0x238>)
 8000c84:	f000 f974 	bl	8000f70 <lcd_send_command>
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000004 	.word	0x20000004
 8000c94:	2000002c 	.word	0x2000002c
 8000c98:	2000006c 	.word	0x2000006c
 8000c9c:	20000018 	.word	0x20000018

08000ca0 <lcd_kick>:


void lcd_kick(LCD_Pins_Config_t * Lcd_No)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if(Lcd_No == &LCD1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <lcd_kick+0x70>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d113      	bne.n	8000cd8 <lcd_kick+0x38>
	{
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.EN, GPIO_PIN_SET);
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <lcd_kick+0x70>)
 8000cb2:	68d8      	ldr	r0, [r3, #12]
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <lcd_kick+0x70>)
 8000cb6:	8a5b      	ldrh	r3, [r3, #18]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f000 fded 	bl	800189a <MCAL_GPIO_WritePin>
		//delay_ms(3);
		dms(2);
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f000 fbb1 	bl	8001428 <dms>
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.EN, GPIO_PIN_RESET);
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <lcd_kick+0x70>)
 8000cc8:	68d8      	ldr	r0, [r3, #12]
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <lcd_kick+0x70>)
 8000ccc:	8a5b      	ldrh	r3, [r3, #18]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f000 fde2 	bl	800189a <MCAL_GPIO_WritePin>
		//delay_ms(3);
		dms(2);
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.EN, GPIO_PIN_RESET);
	}

}
 8000cd6:	e016      	b.n	8000d06 <lcd_kick+0x66>
	else if(Lcd_No == &LCD2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <lcd_kick+0x74>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d112      	bne.n	8000d06 <lcd_kick+0x66>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.EN, GPIO_PIN_SET);
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <lcd_kick+0x74>)
 8000ce2:	68d8      	ldr	r0, [r3, #12]
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <lcd_kick+0x74>)
 8000ce6:	8a5b      	ldrh	r3, [r3, #18]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	f000 fdd5 	bl	800189a <MCAL_GPIO_WritePin>
		dms(2);
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f000 fb99 	bl	8001428 <dms>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.EN, GPIO_PIN_RESET);
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <lcd_kick+0x74>)
 8000cf8:	68d8      	ldr	r0, [r3, #12]
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <lcd_kick+0x74>)
 8000cfc:	8a5b      	ldrh	r3, [r3, #18]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4619      	mov	r1, r3
 8000d02:	f000 fdca 	bl	800189a <MCAL_GPIO_WritePin>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000004 	.word	0x20000004
 8000d14:	20000018 	.word	0x20000018

08000d18 <lcd_send_char>:

void lcd_send_char(LCD_Pins_Config_t * Lcd_No,unsigned char data)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
#endif

#ifdef FOUR_BIT_MODE
	//lcd_is_busy();
	//delay_ms(3);
	dms(2);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 fb7f 	bl	8001428 <dms>
	if(Lcd_No == &LCD1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a5c      	ldr	r2, [pc, #368]	; (8000ea0 <lcd_send_char+0x188>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d157      	bne.n	8000de2 <lcd_send_char+0xca>
	{
		//send last four bits of data
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_SET);
 8000d32:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <lcd_send_char+0x188>)
 8000d34:	68d8      	ldr	r0, [r3, #12]
 8000d36:	4b5a      	ldr	r3, [pc, #360]	; (8000ea0 <lcd_send_char+0x188>)
 8000d38:	8a1b      	ldrh	r3, [r3, #16]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f000 fdac 	bl	800189a <MCAL_GPIO_WritePin>
		unsigned char tmp_data = (data & 0xF0);
 8000d42:	78fb      	ldrb	r3, [r7, #3]
 8000d44:	f023 030f 	bic.w	r3, r3, #15
 8000d48:	73bb      	strb	r3, [r7, #14]
		int i;
		for(i=4; i<8; i++)
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e016      	b.n	8000d7e <lcd_send_char+0x66>
		{
			MCAL_GPIO_WritePin(LCD1.lcd_data_port, LCD_data_pins[i], ((tmp_data & (1<<i))>>i));
 8000d50:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <lcd_send_char+0x188>)
 8000d52:	6858      	ldr	r0, [r3, #4]
 8000d54:	4a53      	ldr	r2, [pc, #332]	; (8000ea4 <lcd_send_char+0x18c>)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8000d5c:	7bba      	ldrb	r2, [r7, #14]
 8000d5e:	2101      	movs	r1, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa42 f303 	asr.w	r3, r2, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	4621      	mov	r1, r4
 8000d74:	f000 fd91 	bl	800189a <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b07      	cmp	r3, #7
 8000d82:	dde5      	ble.n	8000d50 <lcd_send_char+0x38>
		}
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_data);
		lcd_kick(&LCD1);
 8000d84:	4846      	ldr	r0, [pc, #280]	; (8000ea0 <lcd_send_char+0x188>)
 8000d86:	f7ff ff8b 	bl	8000ca0 <lcd_kick>
		//send first four bits of data
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_SET);
 8000d8a:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <lcd_send_char+0x188>)
 8000d8c:	68d8      	ldr	r0, [r3, #12]
 8000d8e:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <lcd_send_char+0x188>)
 8000d90:	8a1b      	ldrh	r3, [r3, #16]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4619      	mov	r1, r3
 8000d96:	f000 fd80 	bl	800189a <MCAL_GPIO_WritePin>
		tmp_data = (data << 4);
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	73bb      	strb	r3, [r7, #14]
		for(i=4; i<8; i++)
 8000da0:	2304      	movs	r3, #4
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e016      	b.n	8000dd4 <lcd_send_char+0xbc>
		{
			MCAL_GPIO_WritePin(LCD1.lcd_data_port, LCD_data_pins[i], ((tmp_data & (1<<i))>>i));
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <lcd_send_char+0x188>)
 8000da8:	6858      	ldr	r0, [r3, #4]
 8000daa:	4a3e      	ldr	r2, [pc, #248]	; (8000ea4 <lcd_send_char+0x18c>)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8000db2:	7bba      	ldrb	r2, [r7, #14]
 8000db4:	2101      	movs	r1, #1
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa42 f303 	asr.w	r3, r2, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4621      	mov	r1, r4
 8000dca:	f000 fd66 	bl	800189a <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	dde5      	ble.n	8000da6 <lcd_send_char+0x8e>
		}
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_data);
		lcd_kick(&LCD1);
 8000dda:	4831      	ldr	r0, [pc, #196]	; (8000ea0 <lcd_send_char+0x188>)
 8000ddc:	f7ff ff60 	bl	8000ca0 <lcd_kick>
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_data);
		lcd_kick(&LCD2);
	}

#endif
}
 8000de0:	e05a      	b.n	8000e98 <lcd_send_char+0x180>
	else if(Lcd_No == &LCD2)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a30      	ldr	r2, [pc, #192]	; (8000ea8 <lcd_send_char+0x190>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d156      	bne.n	8000e98 <lcd_send_char+0x180>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_SET);
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <lcd_send_char+0x190>)
 8000dec:	68d8      	ldr	r0, [r3, #12]
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <lcd_send_char+0x190>)
 8000df0:	8a1b      	ldrh	r3, [r3, #16]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4619      	mov	r1, r3
 8000df6:	f000 fd50 	bl	800189a <MCAL_GPIO_WritePin>
		unsigned char tmp_data = (data & 0xF0);
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	f023 030f 	bic.w	r3, r3, #15
 8000e00:	73fb      	strb	r3, [r7, #15]
		for(i=4; i<8; i++)
 8000e02:	2304      	movs	r3, #4
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	e016      	b.n	8000e36 <lcd_send_char+0x11e>
			MCAL_GPIO_WritePin(LCD2.lcd_data_port, LCD_data_pins[i], ((tmp_data & (1<<i))>>i));
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <lcd_send_char+0x190>)
 8000e0a:	6858      	ldr	r0, [r3, #4]
 8000e0c:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <lcd_send_char+0x18c>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	2101      	movs	r1, #1
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	fa42 f303 	asr.w	r3, r2, r3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f000 fd35 	bl	800189a <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	3301      	adds	r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b07      	cmp	r3, #7
 8000e3a:	dde5      	ble.n	8000e08 <lcd_send_char+0xf0>
		lcd_kick(&LCD2);
 8000e3c:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <lcd_send_char+0x190>)
 8000e3e:	f7ff ff2f 	bl	8000ca0 <lcd_kick>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_SET);
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <lcd_send_char+0x190>)
 8000e44:	68d8      	ldr	r0, [r3, #12]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <lcd_send_char+0x190>)
 8000e48:	8a1b      	ldrh	r3, [r3, #16]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f000 fd24 	bl	800189a <MCAL_GPIO_WritePin>
		tmp_data = (data << 4);
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	73fb      	strb	r3, [r7, #15]
		for(i=4; i<8; i++)
 8000e58:	2304      	movs	r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	e016      	b.n	8000e8c <lcd_send_char+0x174>
			MCAL_GPIO_WritePin(LCD2.lcd_data_port, LCD_data_pins[i], ((tmp_data & (1<<i))>>i));
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <lcd_send_char+0x190>)
 8000e60:	6858      	ldr	r0, [r3, #4]
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <lcd_send_char+0x18c>)
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	401a      	ands	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	fa42 f303 	asr.w	r3, r2, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4621      	mov	r1, r4
 8000e82:	f000 fd0a 	bl	800189a <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	dde5      	ble.n	8000e5e <lcd_send_char+0x146>
		lcd_kick(&LCD2);
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <lcd_send_char+0x190>)
 8000e94:	f7ff ff04 	bl	8000ca0 <lcd_kick>
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	2000002c 	.word	0x2000002c
 8000ea8:	20000018 	.word	0x20000018

08000eac <lcd_send_string>:

void lcd_send_string(LCD_Pins_Config_t * Lcd_No,char *str)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	int character_counter1 = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
	int character_counter2 = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]

	while(*str != '\0')
 8000ebe:	e04b      	b.n	8000f58 <lcd_send_string+0xac>
	{
		if(Lcd_No == &LCD1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <lcd_send_string+0xbc>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d120      	bne.n	8000f0a <lcd_send_string+0x5e>
		{
			character_counter1++;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
			if(character_counter1 == 17)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b11      	cmp	r3, #17
 8000ed2:	d105      	bne.n	8000ee0 <lcd_send_string+0x34>
			{
				//go to second line position 0
				lcd_set_position(&LCD1,2,0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4823      	ldr	r0, [pc, #140]	; (8000f68 <lcd_send_string+0xbc>)
 8000eda:	f000 f913 	bl	8001104 <lcd_set_position>
 8000ede:	e00d      	b.n	8000efc <lcd_send_string+0x50>
			}
			else if(character_counter1 > 32)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b20      	cmp	r3, #32
 8000ee4:	dd0a      	ble.n	8000efc <lcd_send_string+0x50>
			{
				//clear display
				lcd_send_command(&LCD1,clear_display);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	481f      	ldr	r0, [pc, #124]	; (8000f68 <lcd_send_string+0xbc>)
 8000eea:	f000 f841 	bl	8000f70 <lcd_send_command>
				//go to first line position 0
				lcd_set_position(&LCD1,1,0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	481d      	ldr	r0, [pc, #116]	; (8000f68 <lcd_send_string+0xbc>)
 8000ef4:	f000 f906 	bl	8001104 <lcd_set_position>
				character_counter1 = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
			}
			lcd_send_char(&LCD1,*str);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	4819      	ldr	r0, [pc, #100]	; (8000f68 <lcd_send_string+0xbc>)
 8000f04:	f7ff ff08 	bl	8000d18 <lcd_send_char>
 8000f08:	e023      	b.n	8000f52 <lcd_send_string+0xa6>
		}
		else if(Lcd_No == &LCD2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <lcd_send_string+0xc0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d11f      	bne.n	8000f52 <lcd_send_string+0xa6>
		{
			character_counter2++;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
			if(character_counter2 == 17)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b11      	cmp	r3, #17
 8000f1c:	d105      	bne.n	8000f2a <lcd_send_string+0x7e>
			{
				//go to second line position 0
				lcd_set_position(&LCD2,2,0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2102      	movs	r1, #2
 8000f22:	4812      	ldr	r0, [pc, #72]	; (8000f6c <lcd_send_string+0xc0>)
 8000f24:	f000 f8ee 	bl	8001104 <lcd_set_position>
 8000f28:	e00d      	b.n	8000f46 <lcd_send_string+0x9a>
			}
			else if(character_counter2 > 32)
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2b20      	cmp	r3, #32
 8000f2e:	dd0a      	ble.n	8000f46 <lcd_send_string+0x9a>
			{
				//clear display
				lcd_send_command(&LCD2,clear_display);
 8000f30:	2101      	movs	r1, #1
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <lcd_send_string+0xc0>)
 8000f34:	f000 f81c 	bl	8000f70 <lcd_send_command>
				//go to first line position 0
				lcd_set_position(&LCD2,1,0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <lcd_send_string+0xc0>)
 8000f3e:	f000 f8e1 	bl	8001104 <lcd_set_position>
				character_counter2 = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
			}
			lcd_send_char(&LCD2,*str);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <lcd_send_string+0xc0>)
 8000f4e:	f7ff fee3 	bl	8000d18 <lcd_send_char>
		}
		str++;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	603b      	str	r3, [r7, #0]
	while(*str != '\0')
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1af      	bne.n	8000ec0 <lcd_send_string+0x14>
	}
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	20000018 	.word	0x20000018

08000f70 <lcd_send_command>:
	}

}

void lcd_send_command(LCD_Pins_Config_t * Lcd_No,unsigned char command)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
#endif

#ifdef FOUR_BIT_MODE
	int i;
	//delay_ms(3);
	dms(2);
 8000f7c:	2002      	movs	r0, #2
 8000f7e:	f000 fa53 	bl	8001428 <dms>
	if(Lcd_No == &LCD1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <lcd_send_command+0x188>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d157      	bne.n	800103a <lcd_send_command+0xca>
	{
		//send last four bits of command
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_RESET);
 8000f8a:	4b5b      	ldr	r3, [pc, #364]	; (80010f8 <lcd_send_command+0x188>)
 8000f8c:	68d8      	ldr	r0, [r3, #12]
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <lcd_send_command+0x188>)
 8000f90:	8a1b      	ldrh	r3, [r3, #16]
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	f000 fc80 	bl	800189a <MCAL_GPIO_WritePin>
		char tmp_cmd;
		tmp_cmd = (command & 0xF0);
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	f023 030f 	bic.w	r3, r3, #15
 8000fa0:	72bb      	strb	r3, [r7, #10]
		for(i=4; i<8; i++)
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	e016      	b.n	8000fd6 <lcd_send_command+0x66>
		{
			MCAL_GPIO_WritePin(LCD1.lcd_data_port, LCD_data_pins[i], ((tmp_cmd & (1<<i))>>i));
 8000fa8:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <lcd_send_command+0x188>)
 8000faa:	6858      	ldr	r0, [r3, #4]
 8000fac:	4a53      	ldr	r2, [pc, #332]	; (80010fc <lcd_send_command+0x18c>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 8000fb4:	7aba      	ldrb	r2, [r7, #10]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	fa42 f303 	asr.w	r3, r2, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4621      	mov	r1, r4
 8000fcc:	f000 fc65 	bl	800189a <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b07      	cmp	r3, #7
 8000fda:	dde5      	ble.n	8000fa8 <lcd_send_command+0x38>
		}
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_cmd);
		lcd_kick(&LCD1);
 8000fdc:	4846      	ldr	r0, [pc, #280]	; (80010f8 <lcd_send_command+0x188>)
 8000fde:	f7ff fe5f 	bl	8000ca0 <lcd_kick>
		//send first four bits of command
		MCAL_GPIO_WritePin(LCD1.lcd_ctrl_port, LCD1.RS, GPIO_PIN_RESET);
 8000fe2:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <lcd_send_command+0x188>)
 8000fe4:	68d8      	ldr	r0, [r3, #12]
 8000fe6:	4b44      	ldr	r3, [pc, #272]	; (80010f8 <lcd_send_command+0x188>)
 8000fe8:	8a1b      	ldrh	r3, [r3, #16]
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	f000 fc54 	bl	800189a <MCAL_GPIO_WritePin>
		tmp_cmd = (command << 4);
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	72bb      	strb	r3, [r7, #10]
		for(i=4; i<8; i++)
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e016      	b.n	800102c <lcd_send_command+0xbc>
		{
			MCAL_GPIO_WritePin(LCD1.lcd_data_port, LCD_data_pins[i], ((tmp_cmd & (1<<i))>>i));
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	; (80010f8 <lcd_send_command+0x188>)
 8001000:	6858      	ldr	r0, [r3, #4]
 8001002:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <lcd_send_command+0x18c>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 800100a:	7aba      	ldrb	r2, [r7, #10]
 800100c:	2101      	movs	r1, #1
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	401a      	ands	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	fa42 f303 	asr.w	r3, r2, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	4621      	mov	r1, r4
 8001022:	f000 fc3a 	bl	800189a <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b07      	cmp	r3, #7
 8001030:	dde5      	ble.n	8000ffe <lcd_send_command+0x8e>
		}
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_cmd);
		lcd_kick(&LCD1);
 8001032:	4831      	ldr	r0, [pc, #196]	; (80010f8 <lcd_send_command+0x188>)
 8001034:	f7ff fe34 	bl	8000ca0 <lcd_kick>
		//MCAL_GPIO_WritePort(lcd_data_port, tmp_cmd);
		lcd_kick(&LCD2);
	}

#endif
}
 8001038:	e05a      	b.n	80010f0 <lcd_send_command+0x180>
	else if(Lcd_No == &LCD2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a30      	ldr	r2, [pc, #192]	; (8001100 <lcd_send_command+0x190>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d156      	bne.n	80010f0 <lcd_send_command+0x180>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_RESET);
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <lcd_send_command+0x190>)
 8001044:	68d8      	ldr	r0, [r3, #12]
 8001046:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <lcd_send_command+0x190>)
 8001048:	8a1b      	ldrh	r3, [r3, #16]
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f000 fc24 	bl	800189a <MCAL_GPIO_WritePin>
		tmp_cmd = (command & 0xF0);
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	f023 030f 	bic.w	r3, r3, #15
 8001058:	72fb      	strb	r3, [r7, #11]
		for(i=4; i<8; i++)
 800105a:	2304      	movs	r3, #4
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e016      	b.n	800108e <lcd_send_command+0x11e>
			MCAL_GPIO_WritePin(LCD2.lcd_data_port, LCD_data_pins[i], ((tmp_cmd & (1<<i))>>i));
 8001060:	4b27      	ldr	r3, [pc, #156]	; (8001100 <lcd_send_command+0x190>)
 8001062:	6858      	ldr	r0, [r3, #4]
 8001064:	4a25      	ldr	r2, [pc, #148]	; (80010fc <lcd_send_command+0x18c>)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 800106c:	7afa      	ldrb	r2, [r7, #11]
 800106e:	2101      	movs	r1, #1
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	401a      	ands	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	fa42 f303 	asr.w	r3, r2, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	4621      	mov	r1, r4
 8001084:	f000 fc09 	bl	800189a <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3301      	adds	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b07      	cmp	r3, #7
 8001092:	dde5      	ble.n	8001060 <lcd_send_command+0xf0>
		lcd_kick(&LCD2);
 8001094:	481a      	ldr	r0, [pc, #104]	; (8001100 <lcd_send_command+0x190>)
 8001096:	f7ff fe03 	bl	8000ca0 <lcd_kick>
		MCAL_GPIO_WritePin(LCD2.lcd_ctrl_port, LCD2.RS, GPIO_PIN_RESET);
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <lcd_send_command+0x190>)
 800109c:	68d8      	ldr	r0, [r3, #12]
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <lcd_send_command+0x190>)
 80010a0:	8a1b      	ldrh	r3, [r3, #16]
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	f000 fbf8 	bl	800189a <MCAL_GPIO_WritePin>
		tmp_cmd = (command << 4);
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	72fb      	strb	r3, [r7, #11]
		for(i=4; i<8; i++)
 80010b0:	2304      	movs	r3, #4
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e016      	b.n	80010e4 <lcd_send_command+0x174>
			MCAL_GPIO_WritePin(LCD2.lcd_data_port, LCD_data_pins[i], ((tmp_cmd & (1<<i))>>i));
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <lcd_send_command+0x190>)
 80010b8:	6858      	ldr	r0, [r3, #4]
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <lcd_send_command+0x18c>)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f832 4013 	ldrh.w	r4, [r2, r3, lsl #1]
 80010c2:	7afa      	ldrb	r2, [r7, #11]
 80010c4:	2101      	movs	r1, #1
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	401a      	ands	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	fa42 f303 	asr.w	r3, r2, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	4621      	mov	r1, r4
 80010da:	f000 fbde 	bl	800189a <MCAL_GPIO_WritePin>
		for(i=4; i<8; i++)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	dde5      	ble.n	80010b6 <lcd_send_command+0x146>
		lcd_kick(&LCD2);
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <lcd_send_command+0x190>)
 80010ec:	f7ff fdd8 	bl	8000ca0 <lcd_kick>
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	20000004 	.word	0x20000004
 80010fc:	2000002c 	.word	0x2000002c
 8001100:	20000018 	.word	0x20000018

08001104 <lcd_set_position>:


void lcd_set_position(LCD_Pins_Config_t * Lcd_No,int line, int position)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	if(Lcd_No == &LCD1)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4a4e      	ldr	r2, [pc, #312]	; (800124c <lcd_set_position+0x148>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d149      	bne.n	80011ac <lcd_set_position+0xa8>
	{
		if(line == 1)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d110      	bne.n	8001140 <lcd_set_position+0x3c>
		{
			if(position >= 0 && position < 16)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	f2c0 808e 	blt.w	8001242 <lcd_set_position+0x13e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	f300 808a 	bgt.w	8001242 <lcd_set_position+0x13e>
			{
				lcd_send_command(&LCD1,cursor_first_line + position);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	3b80      	subs	r3, #128	; 0x80
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	4844      	ldr	r0, [pc, #272]	; (800124c <lcd_set_position+0x148>)
 800113a:	f7ff ff19 	bl	8000f70 <lcd_send_command>
				lcd_send_command(&LCD2,cursor_fourth_line + position);
			}
		}
	}

}
 800113e:	e080      	b.n	8001242 <lcd_set_position+0x13e>
		else if (line == 2)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d10e      	bne.n	8001164 <lcd_set_position+0x60>
			if(position >= 0 && position < 16)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db7a      	blt.n	8001242 <lcd_set_position+0x13e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	dc77      	bgt.n	8001242 <lcd_set_position+0x13e>
				lcd_send_command(&LCD1,cursor_second_line + position);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3b40      	subs	r3, #64	; 0x40
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	483b      	ldr	r0, [pc, #236]	; (800124c <lcd_set_position+0x148>)
 800115e:	f7ff ff07 	bl	8000f70 <lcd_send_command>
}
 8001162:	e06e      	b.n	8001242 <lcd_set_position+0x13e>
		else if (line == 3)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d10e      	bne.n	8001188 <lcd_set_position+0x84>
			if(position >= 0 && position < 16)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db68      	blt.n	8001242 <lcd_set_position+0x13e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	dc65      	bgt.n	8001242 <lcd_set_position+0x13e>
				lcd_send_command(&LCD1,cursor_third_line + position);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3b70      	subs	r3, #112	; 0x70
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4619      	mov	r1, r3
 8001180:	4832      	ldr	r0, [pc, #200]	; (800124c <lcd_set_position+0x148>)
 8001182:	f7ff fef5 	bl	8000f70 <lcd_send_command>
}
 8001186:	e05c      	b.n	8001242 <lcd_set_position+0x13e>
		else if (line == 4)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b04      	cmp	r3, #4
 800118c:	d159      	bne.n	8001242 <lcd_set_position+0x13e>
			if(position >= 0 && position < 16)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db56      	blt.n	8001242 <lcd_set_position+0x13e>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	dc53      	bgt.n	8001242 <lcd_set_position+0x13e>
				lcd_send_command(&LCD1,cursor_fourth_line + position);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3b30      	subs	r3, #48	; 0x30
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4619      	mov	r1, r3
 80011a4:	4829      	ldr	r0, [pc, #164]	; (800124c <lcd_set_position+0x148>)
 80011a6:	f7ff fee3 	bl	8000f70 <lcd_send_command>
}
 80011aa:	e04a      	b.n	8001242 <lcd_set_position+0x13e>
	else if(Lcd_No == &LCD2)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4a28      	ldr	r2, [pc, #160]	; (8001250 <lcd_set_position+0x14c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d146      	bne.n	8001242 <lcd_set_position+0x13e>
		if(line == 1)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10e      	bne.n	80011d8 <lcd_set_position+0xd4>
			if(position >= 0 && position < 16)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db40      	blt.n	8001242 <lcd_set_position+0x13e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	dc3d      	bgt.n	8001242 <lcd_set_position+0x13e>
				lcd_send_command(&LCD2,cursor_first_line + position);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3b80      	subs	r3, #128	; 0x80
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	481f      	ldr	r0, [pc, #124]	; (8001250 <lcd_set_position+0x14c>)
 80011d2:	f7ff fecd 	bl	8000f70 <lcd_send_command>
}
 80011d6:	e034      	b.n	8001242 <lcd_set_position+0x13e>
		else if (line == 2)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d10e      	bne.n	80011fc <lcd_set_position+0xf8>
			if(position >= 0 && position < 16)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db2e      	blt.n	8001242 <lcd_set_position+0x13e>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	dc2b      	bgt.n	8001242 <lcd_set_position+0x13e>
				lcd_send_command(&LCD2,cursor_second_line + position);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	3b40      	subs	r3, #64	; 0x40
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	4816      	ldr	r0, [pc, #88]	; (8001250 <lcd_set_position+0x14c>)
 80011f6:	f7ff febb 	bl	8000f70 <lcd_send_command>
}
 80011fa:	e022      	b.n	8001242 <lcd_set_position+0x13e>
		else if (line == 3)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d10e      	bne.n	8001220 <lcd_set_position+0x11c>
			if(position >= 0 && position < 16)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db1c      	blt.n	8001242 <lcd_set_position+0x13e>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	dc19      	bgt.n	8001242 <lcd_set_position+0x13e>
				lcd_send_command(&LCD2,cursor_third_line + position);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3b70      	subs	r3, #112	; 0x70
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4619      	mov	r1, r3
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <lcd_set_position+0x14c>)
 800121a:	f7ff fea9 	bl	8000f70 <lcd_send_command>
}
 800121e:	e010      	b.n	8001242 <lcd_set_position+0x13e>
		else if (line == 4)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b04      	cmp	r3, #4
 8001224:	d10d      	bne.n	8001242 <lcd_set_position+0x13e>
			if(position >= 0 && position < 16)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <lcd_set_position+0x13e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	dc07      	bgt.n	8001242 <lcd_set_position+0x13e>
				lcd_send_command(&LCD2,cursor_fourth_line + position);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	3b30      	subs	r3, #48	; 0x30
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <lcd_set_position+0x14c>)
 800123e:	f7ff fe97 	bl	8000f70 <lcd_send_command>
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000004 	.word	0x20000004
 8001250:	20000018 	.word	0x20000018

08001254 <lcd_clear>:

void lcd_clear(LCD_Pins_Config_t * Lcd_No)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	if(Lcd_No == &LCD1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <lcd_clear+0x34>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d104      	bne.n	800126e <lcd_clear+0x1a>
	{
		lcd_send_command(&LCD1,clear_display);
 8001264:	2101      	movs	r1, #1
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <lcd_clear+0x34>)
 8001268:	f7ff fe82 	bl	8000f70 <lcd_send_command>
	else if(Lcd_No == &LCD2)
	{
		lcd_send_command(&LCD2,clear_display);
	}

}
 800126c:	e007      	b.n	800127e <lcd_clear+0x2a>
	else if(Lcd_No == &LCD2)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <lcd_clear+0x38>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d103      	bne.n	800127e <lcd_clear+0x2a>
		lcd_send_command(&LCD2,clear_display);
 8001276:	2101      	movs	r1, #1
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <lcd_clear+0x38>)
 800127a:	f7ff fe79 	bl	8000f70 <lcd_send_command>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000004 	.word	0x20000004
 800128c:	20000018 	.word	0x20000018

08001290 <Servo1_Entry_Gate_Init>:
#define Down 2


//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_PIN_CONFIG_T PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_8;
 8001296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800129c:	2304      	movs	r3, #4
 800129e:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 80012a0:	2301      	movs	r3, #1
 80012a2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <Servo1_Entry_Gate_Init+0x28>)
 80012aa:	f000 fa48 	bl	800173e <MCAL_GPIO_Init>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40010c00 	.word	0x40010c00

080012bc <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d10f      	bne.n	80012ec <Servo1_Entry_Gate+0x30>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d2:	4812      	ldr	r0, [pc, #72]	; (800131c <Servo1_Entry_Gate+0x60>)
 80012d4:	f000 fae1 	bl	800189a <MCAL_GPIO_WritePin>
		dus(500);
 80012d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012dc:	f000 f890 	bl	8001400 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <Servo1_Entry_Gate+0x60>)
 80012e8:	f000 fad7 	bl	800189a <MCAL_GPIO_WritePin>
	}
	if(Direction==Down)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d10f      	bne.n	8001312 <Servo1_Entry_Gate+0x56>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <Servo1_Entry_Gate+0x60>)
 80012fa:	f000 face 	bl	800189a <MCAL_GPIO_WritePin>
		dus(1488);
 80012fe:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8001302:	f000 f87d 	bl	8001400 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <Servo1_Entry_Gate+0x60>)
 800130e:	f000 fac4 	bl	800189a <MCAL_GPIO_WritePin>
	}


}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40010c00 	.word	0x40010c00

08001320 <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	GPIO_PIN_CONFIG_T PinCinfg;
	PinCinfg.GPIO_PIN_NUMBER=GPIO_PIN_9;
 8001326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800132c:	2304      	movs	r3, #4
 800132e:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHz;
 8001330:	2301      	movs	r3, #1
 8001332:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <Servo2_Exit_Gate_Init+0x28>)
 800133a:	f000 fa00 	bl	800173e <MCAL_GPIO_Init>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40010c00 	.word	0x40010c00

0800134c <Servo2_Exit_Gate>:

//Direction Up or Down
void Servo2_Exit_Gate(uint8_t Direction)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10f      	bne.n	800137c <Servo2_Exit_Gate+0x30>
	{
		//servo2 Exit gate up +90
		GPIO_PIN_CONFIG_T PinCinfg;
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <Servo2_Exit_Gate+0x60>)
 8001364:	f000 fa99 	bl	800189a <MCAL_GPIO_WritePin>
		dus(500);
 8001368:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800136c:	f000 f848 	bl	8001400 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <Servo2_Exit_Gate+0x60>)
 8001378:	f000 fa8f 	bl	800189a <MCAL_GPIO_WritePin>
	}

	if(Direction == Down)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d10f      	bne.n	80013a2 <Servo2_Exit_Gate+0x56>
	{
		//servo2 Exit gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <Servo2_Exit_Gate+0x60>)
 800138a:	f000 fa86 	bl	800189a <MCAL_GPIO_WritePin>
		dus(1488);
 800138e:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8001392:	f000 f835 	bl	8001400 <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <Servo2_Exit_Gate+0x60>)
 800139e:	f000 fa7c 	bl	800189a <MCAL_GPIO_WritePin>
	}

}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40010c00 	.word	0x40010c00

080013b0 <Timer2_init>:
 */

#include "timer.h"

void Timer2_init(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <Timer2_init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <Timer2_init+0x40>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <Timer2_init+0x44>)
 80013c2:	2207      	movs	r2, #7
 80013c4:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05-->20*0.05=1
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <Timer2_init+0x48>)
 80013c8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013cc:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 80013ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 80013de:	bf00      	nop
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <Timer2_init+0x4c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0fb      	beq.n	80013e0 <Timer2_init+0x30>
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	4002101c 	.word	0x4002101c
 80013f4:	40000028 	.word	0x40000028
 80013f8:	4000002c 	.word	0x4000002c
 80013fc:	40000010 	.word	0x40000010

08001400 <dus>:

void dus(int us)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <dus+0x24>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 800140e:	bf00      	nop
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <dus+0x24>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3fa      	bcc.n	8001410 <dus+0x10>
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40000024 	.word	0x40000024

08001428 <dms>:

void dms(int ms)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	e006      	b.n	8001448 <dms+0x20>
	{
		dus(1000);
 800143a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143e:	f7ff ffdf 	bl	8001400 <dus>
	for(i=0;i<ms;i++)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3301      	adds	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf4      	blt.n	800143a <dms+0x12>
	}
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <EXTI0_IRQHandler>:
1: selected trigger request occurred
This bit is set when the selected edge event arrives on the external interrupt line. This bit is
cleared by writing a ‘1’ into the bit.*/

void EXTI0_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	//clear pending flag
	EXTI->PR |= 1<<0;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <EXTI0_IRQHandler+0x1c>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <EXTI0_IRQHandler+0x1c>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[0]();
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <EXTI0_IRQHandler+0x20>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4798      	blx	r3
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40010400 	.word	0x40010400
 8001478:	20000070 	.word	0x20000070

0800147c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <EXTI1_IRQHandler+0x1c>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <EXTI1_IRQHandler+0x1c>)
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[1]();
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <EXTI1_IRQHandler+0x20>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4798      	blx	r3
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40010400 	.word	0x40010400
 800149c:	20000070 	.word	0x20000070

080014a0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <EXTI2_IRQHandler+0x1c>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <EXTI2_IRQHandler+0x1c>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[2]();
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <EXTI2_IRQHandler+0x20>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4798      	blx	r3
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40010400 	.word	0x40010400
 80014c0:	20000070 	.word	0x20000070

080014c4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <EXTI3_IRQHandler+0x1c>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <EXTI3_IRQHandler+0x1c>)
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[3]();
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <EXTI3_IRQHandler+0x20>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4798      	blx	r3

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010400 	.word	0x40010400
 80014e4:	20000070 	.word	0x20000070

080014e8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <EXTI4_IRQHandler+0x1c>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <EXTI4_IRQHandler+0x1c>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <EXTI4_IRQHandler+0x20>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	4798      	blx	r3
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40010400 	.word	0x40010400
 8001508:	20000070 	.word	0x20000070

0800150c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5; GP_IRQ_callBack[5]();}
 8001510:	4b26      	ldr	r3, [pc, #152]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <EXTI9_5_IRQHandler+0x22>
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	4a22      	ldr	r2, [pc, #136]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	6153      	str	r3, [r2, #20]
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <EXTI9_5_IRQHandler+0xa4>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6; GP_IRQ_callBack[6]();}
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <EXTI9_5_IRQHandler+0x40>
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 8001540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <EXTI9_5_IRQHandler+0xa4>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7; GP_IRQ_callBack[7]();}
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <EXTI9_5_IRQHandler+0x5e>
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800155e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001562:	6153      	str	r3, [r2, #20]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <EXTI9_5_IRQHandler+0xa4>)
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8; GP_IRQ_callBack[8]();}
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <EXTI9_5_IRQHandler+0x7c>
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6153      	str	r3, [r2, #20]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <EXTI9_5_IRQHandler+0xa4>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9; GP_IRQ_callBack[9]();}
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <EXTI9_5_IRQHandler+0x9a>
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <EXTI9_5_IRQHandler+0xa0>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6153      	str	r3, [r2, #20]
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <EXTI9_5_IRQHandler+0xa4>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	4798      	blx	r3

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40010400 	.word	0x40010400
 80015b0:	20000070 	.word	0x20000070

080015b4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10; GP_IRQ_callBack[10]();}
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <EXTI15_10_IRQHandler+0x22>
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	4a29      	ldr	r2, [pc, #164]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ce:	6153      	str	r3, [r2, #20]
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <EXTI15_10_IRQHandler+0xc0>)
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11; GP_IRQ_callBack[11]();}
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <EXTI15_10_IRQHandler+0x40>
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	4a22      	ldr	r2, [pc, #136]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 80015e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ec:	6153      	str	r3, [r2, #20]
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <EXTI15_10_IRQHandler+0xc0>)
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12; GP_IRQ_callBack[12]();}
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <EXTI15_10_IRQHandler+0x5e>
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001606:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800160a:	6153      	str	r3, [r2, #20]
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <EXTI15_10_IRQHandler+0xc0>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13; GP_IRQ_callBack[13]();}
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <EXTI15_10_IRQHandler+0x7c>
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001624:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001628:	6153      	str	r3, [r2, #20]
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <EXTI15_10_IRQHandler+0xc0>)
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162e:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14; GP_IRQ_callBack[14]();}
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <EXTI15_10_IRQHandler+0x9a>
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001646:	6153      	str	r3, [r2, #20]
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <EXTI15_10_IRQHandler+0xc0>)
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15; GP_IRQ_callBack[15]();}
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d008      	beq.n	800166c <EXTI15_10_IRQHandler+0xb8>
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <EXTI15_10_IRQHandler+0xbc>)
 8001660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001664:	6153      	str	r3, [r2, #20]
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <EXTI15_10_IRQHandler+0xc0>)
 8001668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166a:	4798      	blx	r3

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40010400 	.word	0x40010400
 8001674:	20000070 	.word	0x20000070

08001678 <Get_Bit_Location>:
 *      Author: HFCS
 */

#include "gpio.h"

uint8_t Get_Bit_Location(uint16_t PinNumber){
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	2b80      	cmp	r3, #128	; 0x80
 8001686:	d042      	beq.n	800170e <Get_Bit_Location+0x96>
 8001688:	2b80      	cmp	r3, #128	; 0x80
 800168a:	dc11      	bgt.n	80016b0 <Get_Bit_Location+0x38>
 800168c:	2b08      	cmp	r3, #8
 800168e:	d036      	beq.n	80016fe <Get_Bit_Location+0x86>
 8001690:	2b08      	cmp	r3, #8
 8001692:	dc06      	bgt.n	80016a2 <Get_Bit_Location+0x2a>
 8001694:	2b02      	cmp	r3, #2
 8001696:	d02e      	beq.n	80016f6 <Get_Bit_Location+0x7e>
 8001698:	2b04      	cmp	r3, #4
 800169a:	d02e      	beq.n	80016fa <Get_Bit_Location+0x82>
 800169c:	2b01      	cmp	r3, #1
 800169e:	d028      	beq.n	80016f2 <Get_Bit_Location+0x7a>
 80016a0:	e047      	b.n	8001732 <Get_Bit_Location+0xba>
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d02f      	beq.n	8001706 <Get_Bit_Location+0x8e>
 80016a6:	2b40      	cmp	r3, #64	; 0x40
 80016a8:	d02f      	beq.n	800170a <Get_Bit_Location+0x92>
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d029      	beq.n	8001702 <Get_Bit_Location+0x8a>
 80016ae:	e040      	b.n	8001732 <Get_Bit_Location+0xba>
 80016b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016b4:	d033      	beq.n	800171e <Get_Bit_Location+0xa6>
 80016b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ba:	dc09      	bgt.n	80016d0 <Get_Bit_Location+0x58>
 80016bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c0:	d029      	beq.n	8001716 <Get_Bit_Location+0x9e>
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d028      	beq.n	800171a <Get_Bit_Location+0xa2>
 80016c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016cc:	d021      	beq.n	8001712 <Get_Bit_Location+0x9a>
 80016ce:	e030      	b.n	8001732 <Get_Bit_Location+0xba>
 80016d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016d4:	d027      	beq.n	8001726 <Get_Bit_Location+0xae>
 80016d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016da:	dc03      	bgt.n	80016e4 <Get_Bit_Location+0x6c>
 80016dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e0:	d01f      	beq.n	8001722 <Get_Bit_Location+0xaa>
 80016e2:	e026      	b.n	8001732 <Get_Bit_Location+0xba>
 80016e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016e8:	d01f      	beq.n	800172a <Get_Bit_Location+0xb2>
 80016ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ee:	d01e      	beq.n	800172e <Get_Bit_Location+0xb6>
 80016f0:	e01f      	b.n	8001732 <Get_Bit_Location+0xba>
		case GPIO_PIN_0:
			return 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e01e      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_1:
			return 4;
 80016f6:	2304      	movs	r3, #4
 80016f8:	e01c      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_2:
			return 8;
 80016fa:	2308      	movs	r3, #8
 80016fc:	e01a      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_3:
			return 12;
 80016fe:	230c      	movs	r3, #12
 8001700:	e018      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_4:
			return 16;
 8001702:	2310      	movs	r3, #16
 8001704:	e016      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_5:
			return 20;
 8001706:	2314      	movs	r3, #20
 8001708:	e014      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_6:
			return 24;
 800170a:	2318      	movs	r3, #24
 800170c:	e012      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_7:
			return 28;
 800170e:	231c      	movs	r3, #28
 8001710:	e010      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_8:
			return 0;
 8001712:	2300      	movs	r3, #0
 8001714:	e00e      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_9:
			return 4;
 8001716:	2304      	movs	r3, #4
 8001718:	e00c      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_10:
			return 8;
 800171a:	2308      	movs	r3, #8
 800171c:	e00a      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_11:
			return 12;
 800171e:	230c      	movs	r3, #12
 8001720:	e008      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_12:
			return 16;
 8001722:	2310      	movs	r3, #16
 8001724:	e006      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_13:
			return 20;
 8001726:	2314      	movs	r3, #20
 8001728:	e004      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_14:
			return 24;
 800172a:	2318      	movs	r3, #24
 800172c:	e002      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
		case GPIO_PIN_15:
			return 28;
 800172e:	231c      	movs	r3, #28
 8001730:	e000      	b.n	8001734 <Get_Bit_Location+0xbc>
			break;
	}
	return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <MCAL_GPIO_Init>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinConfig: Pointer to GPIO_PIN_CONFIG_T structure that contains the configurations of GPIO pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_PIN_CONFIG_T *PinConfig){
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..E)
	//Port configuration register high (GPIOx_CRH) (x=A..E)
	volatile uint32_t *ConfiguredRegister = NULL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_config = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
	if(PinConfig->GPIO_PIN_NUMBER < GPIO_PIN_8){
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2bff      	cmp	r3, #255	; 0xff
 8001756:	d802      	bhi.n	800175e <MCAL_GPIO_Init+0x20>
		ConfiguredRegister = &(GPIOx->CRL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e002      	b.n	8001764 <MCAL_GPIO_Init+0x26>
	}
	else{
		ConfiguredRegister = &(GPIOx->CRH);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	60fb      	str	r3, [r7, #12]
	}
	// We should clear registers CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) &= ~(0xf << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff85 	bl	8001678 <Get_Bit_Location>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	230f      	movs	r3, #15
 8001774:	4093      	lsls	r3, r2
 8001776:	43da      	mvns	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	401a      	ands	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	601a      	str	r2, [r3, #0]
	// if GPIO ====>Output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	789b      	ldrb	r3, [r3, #2]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d00b      	beq.n	80017a2 <MCAL_GPIO_Init+0x64>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	789b      	ldrb	r3, [r3, #2]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d007      	beq.n	80017a2 <MCAL_GPIO_Init+0x64>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	789b      	ldrb	r3, [r3, #2]
 8001796:	2b07      	cmp	r3, #7
 8001798:	d003      	beq.n	80017a2 <MCAL_GPIO_Init+0x64>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d10a      	bne.n	80017b8 <MCAL_GPIO_Init+0x7a>
	{
		//set CNFy[1:0],MODEy[1:0]
		pin_config = ( ( (PinConfig->GPIO_MODE-4) << 2 ) | (PinConfig->GPIO_OUTPUT_SPEED) ) &0x0f ;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	789b      	ldrb	r3, [r3, #2]
 80017a6:	3b04      	subs	r3, #4
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	78d2      	ldrb	r2, [r2, #3]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	e02b      	b.n	8001810 <MCAL_GPIO_Init+0xd2>
	}
	// if GPIO ====>Input 00: Input mode (reset state)
	else{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog)){
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	789b      	ldrb	r3, [r3, #2]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d003      	beq.n	80017c8 <MCAL_GPIO_Init+0x8a>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d106      	bne.n	80017d6 <MCAL_GPIO_Init+0x98>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( (PinConfig->GPIO_MODE) << 2 ) | 0x0) &0x0f);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	789b      	ldrb	r3, [r3, #2]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	e01c      	b.n	8001810 <MCAL_GPIO_Init+0xd2>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	789b      	ldrb	r3, [r3, #2]
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d102      	bne.n	80017e4 <MCAL_GPIO_Init+0xa6>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( GPIO_MODE_INPUT_FLO << 2 ) | 0x0) &0x0f);
 80017de:	2304      	movs	r3, #4
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	e015      	b.n	8001810 <MCAL_GPIO_Init+0xd2>
		}
		//Input with pull-up / pull-down
		else{
			pin_config = (( ( GPIO_MODE_INPUT_PU << 2 ) | 0x0) &0x0f);
 80017e4:	2308      	movs	r3, #8
 80017e6:	60bb      	str	r3, [r7, #8]
			if(PinConfig->GPIO_MODE ==  GPIO_MODE_INPUT_PU){
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	789b      	ldrb	r3, [r3, #2]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d107      	bne.n	8001800 <MCAL_GPIO_Init+0xc2>
				//PxODR register 1 Input pull-up
				GPIOx->ODR |= PinConfig->GPIO_PIN_NUMBER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	8812      	ldrh	r2, [r2, #0]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	e007      	b.n	8001810 <MCAL_GPIO_Init+0xd2>
			}
			else{
				//PxODR register 0 Input pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PIN_NUMBER);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	8812      	ldrh	r2, [r2, #0]
 8001808:	43d2      	mvns	r2, r2
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) |= (pin_config << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff2f 	bl	8001678 <Get_Bit_Location>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	fa03 f202 	lsl.w	r2, r3, r2
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	601a      	str	r2, [r3, #0]
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <MCAL_GPIO_ReadPin>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @retval		- return pin state according to @ref GPIO_PIN_STATE
 * Note			- none
 * */
uint8_t MCAL_GPIO_ReadPin(GPIO_t *GPIOx,uint16_t PinNumber){
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	460b      	mov	r3, r1
 8001840:	807b      	strh	r3, [r7, #2]
	uint8_t bit_status;
	if( ( (GPIOx->IDR)&PinNumber) != GPIO_PIN_RESET){
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <MCAL_GPIO_ReadPin+0x1e>
		bit_status = GPIO_PIN_SET;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e001      	b.n	8001858 <MCAL_GPIO_ReadPin+0x22>
	}
	else{
		bit_status = GPIO_PIN_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
	}
	return bit_status;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <MCAL_GPIO_ReadPort>:
 * @brief		- Read value in all port pins
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @retval		- return port value
 * Note			- none
 * */
uint16_t MCAL_GPIO_ReadPort(GPIO_t *GPIOx){
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	uint16_t port_value;
	port_value = (uint16_t)GPIOx->IDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	81fb      	strh	r3, [r7, #14]
	return port_value;
 8001872:	89fb      	ldrh	r3, [r7, #14]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <MCAL_GPIO_WritePort>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- value: value which will be written on port
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_WritePort(GPIO_t *GPIOx,uint8_t value){
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR = (uint32_t)value;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <MCAL_GPIO_WritePin>:
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @param[in]	- value: value which will be written on pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_WritePin(GPIO_t *GPIOx,uint16_t PinNumber,uint8_t value){
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	807b      	strh	r3, [r7, #2]
 80018a6:	4613      	mov	r3, r2
 80018a8:	707b      	strb	r3, [r7, #1]
	if(value != GPIO_PIN_RESET){
 80018aa:	787b      	ldrb	r3, [r7, #1]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <MCAL_GPIO_WritePin+0x1e>
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = PinNumber;
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]
0: No action on the corresponding ODRx bit
1: Reset the corresponding ODRx bit*/
		GPIOx->BRR =(uint32_t)PinNumber;

	}
}
 80018b6:	e002      	b.n	80018be <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR =(uint32_t)PinNumber;
 80018b8:	887a      	ldrh	r2, [r7, #2]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	615a      	str	r2, [r3, #20]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <MCAL_GPIO_TogglePin>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinNumber : set pin number according to @ref GPIO_PIN_NUMBER
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_TogglePin(GPIO_t *GPIOx,uint16_t PinNumber){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= PinNumber;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	405a      	eors	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60da      	str	r2, [r3, #12]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
	...

080018ec <MCAL_RCC_Get_SYS_CLKFreq>:
	1111: SYSCLK divided by 512*/
const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};


uint32_t MCAL_RCC_Get_SYS_CLKFreq(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/

	switch( (RCC->CFGR >>2) & 0b11 )
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MCAL_RCC_Get_SYS_CLKFreq+0x34>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d00a      	beq.n	8001914 <MCAL_RCC_Get_SYS_CLKFreq+0x28>
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d302      	bcc.n	8001908 <MCAL_RCC_Get_SYS_CLKFreq+0x1c>
 8001902:	2b0a      	cmp	r3, #10
 8001904:	d002      	beq.n	800190c <MCAL_RCC_Get_SYS_CLKFreq+0x20>
 8001906:	e003      	b.n	8001910 <MCAL_RCC_Get_SYS_CLKFreq+0x24>
	{

	case 00:
		return HSI_RC_CLK;
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MCAL_RCC_Get_SYS_CLKFreq+0x38>)
 800190a:	e005      	b.n	8001918 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		//return HSE_CLK;
		break;

	case 10:
		//to do calc it HSE PLLCLK & PLLMULL & PLL source Mux
		return 16000000;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MCAL_RCC_Get_SYS_CLKFreq+0x3c>)
 800190e:	e003      	b.n	8001918 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;

	default:
		return 0;
 8001910:	2300      	movs	r3, #0
 8001912:	e001      	b.n	8001918 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;
 8001914:	bf00      	nop
		break;

	}
	return 0;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40021000 	.word	0x40021000
 8001924:	007a1200 	.word	0x007a1200
 8001928:	00f42400 	.word	0x00f42400

0800192c <MCAL_RCC_Get_HCLK_Freq>:


uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	1011: SYSCLK divided by 16
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
	return MCAL_RCC_Get_SYS_CLKFreq() >> AHBPrescTable[( (RCC->CFGR >> 7) & 0b1111) ];/*(( RCC->CFGR >>8) & 0b1111) This Is
 8001930:	f7ff ffdc 	bl	80018ec <MCAL_RCC_Get_SYS_CLKFreq>
 8001934:	4601      	mov	r1, r0
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <MCAL_RCC_Get_HCLK_Freq+0x20>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	09db      	lsrs	r3, r3, #7
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	4a03      	ldr	r2, [pc, #12]	; (8001950 <MCAL_RCC_Get_HCLK_Freq+0x24>)
 8001942:	5cd3      	ldrb	r3, [r2, r3]
 8001944:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of AHB  prescaler To Determine index On 2d Upper Array */


}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	08002118 	.word	0x08002118

08001954 <MCAL_RCC_Get_PCLK1_Freq>:



uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return ( MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[ (( RCC->CFGR >>8) & 0b111) ] ); /*(( RCC->CFGR >>8) & 0b111) This Is
 8001958:	f7ff ffe8 	bl	800192c <MCAL_RCC_Get_HCLK_Freq>
 800195c:	4601      	mov	r1, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE1 prescaler To Determine index On Upper Array */

}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	08002110 	.word	0x08002110

0800197c <MCAL_RCC_Get_PCLK2_Freq>:


uint32_t MCAL_RCC_Get_PCLK2_Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return (MCAL_RCC_Get_HCLK_Freq() >> (APBPrescTable[( (RCC->CFGR >>11) & 0b111 )])); /*(( RCC->CFGR >>11) & 0b111) This Is
 8001980:	f7ff ffd4 	bl	800192c <MCAL_RCC_Get_HCLK_Freq>
 8001984:	4601      	mov	r1, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0adb      	lsrs	r3, r3, #11
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE2 prescaler To Determine index On Upper Array */

}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	08002110 	.word	0x08002110

080019a4 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_t* USARTx, USART_Config_t* UART_Config)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a59      	ldr	r2, [pc, #356]	; (8001b18 <MCAL_UART_Init+0x174>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d109      	bne.n	80019ca <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLOCK_EN();
 80019b6:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <MCAL_UART_Init+0x178>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <MCAL_UART_Init+0x178>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 80019c2:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <MCAL_UART_Init+0x17c>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e01a      	b.n	8001a00 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a55      	ldr	r2, [pc, #340]	; (8001b24 <MCAL_UART_Init+0x180>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d109      	bne.n	80019e6 <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLOCK_EN();
 80019d2:	4b52      	ldr	r3, [pc, #328]	; (8001b1c <MCAL_UART_Init+0x178>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a51      	ldr	r2, [pc, #324]	; (8001b1c <MCAL_UART_Init+0x178>)
 80019d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019dc:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 80019de:	4a50      	ldr	r2, [pc, #320]	; (8001b20 <MCAL_UART_Init+0x17c>)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6053      	str	r3, [r2, #4]
 80019e4:	e00c      	b.n	8001a00 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <MCAL_UART_Init+0x184>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d108      	bne.n	8001a00 <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLOCK_EN();
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <MCAL_UART_Init+0x178>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a4a      	ldr	r2, [pc, #296]	; (8001b1c <MCAL_UART_Init+0x178>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 80019fa:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <MCAL_UART_Init+0x17c>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	8812      	ldrh	r2, [r2, #0]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	8912      	ldrh	r2, [r2, #8]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	8952      	ldrh	r2, [r2, #10]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	8992      	ldrh	r2, [r2, #12]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	89d2      	ldrh	r2, [r2, #14]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <MCAL_UART_Init+0x174>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d103      	bne.n	8001a62 <MCAL_UART_Init+0xbe>

	{
		pclk = MCAL_RCC_Get_PCLK2_Freq();
 8001a5a:	f7ff ff8f 	bl	800197c <MCAL_RCC_Get_PCLK2_Freq>
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	e002      	b.n	8001a68 <MCAL_UART_Init+0xc4>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_Get_PCLK1_Freq();
 8001a62:	f7ff ff77 	bl	8001954 <MCAL_RCC_Get_PCLK1_Freq>
 8001a66:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a74:	0119      	lsls	r1, r3, #4
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009a      	lsls	r2, r3, #2
 8001a80:	441a      	add	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a98:	2064      	movs	r0, #100	; 0x64
 8001a9a:	fb00 f303 	mul.w	r3, r0, r3
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <MCAL_UART_Init+0x188>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	8a1b      	ldrh	r3, [r3, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d026      	beq.n	8001b0e <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	8a12      	ldrh	r2, [r2, #16]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <MCAL_UART_Init+0x174>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d106      	bne.n	8001ae4 <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_ENABLE();
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MCAL_UART_Init+0x18c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <MCAL_UART_Init+0x18c>)
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_ENABLE();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_ENABLE();
	}
}
 8001ae2:	e014      	b.n	8001b0e <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <MCAL_UART_Init+0x180>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d106      	bne.n	8001afa <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_ENABLE();
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MCAL_UART_Init+0x18c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <MCAL_UART_Init+0x18c>)
 8001af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	e009      	b.n	8001b0e <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <MCAL_UART_Init+0x184>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_ENABLE();
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <MCAL_UART_Init+0x18c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <MCAL_UART_Init+0x18c>)
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	2000005c 	.word	0x2000005c
 8001b24:	40004400 	.word	0x40004400
 8001b28:	40004800 	.word	0x40004800
 8001b2c:	51eb851f 	.word	0x51eb851f
 8001b30:	e000e104 	.word	0xe000e104

08001b34 <MCAL_UART_SendData>:
	4. Select DMA enable (DMAT) in USART_CR3 if Multi buffer Communication is to takeplace. Configure the DMA register as explained in multibuffer communication.
	5. Select the desired baud rate using the USART_BRR register.
	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission.
 * */
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	71fb      	strb	r3, [r7, #7]
	//7. Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this	for each data to be transmitted in case of single buffer.
		//8. After writing the last data into the USART_DR register, wait until TC=1. This indicates
		//that the transmission of the last frame is complete. This is required for instance when
		//the USART is disabled or enters the Halt mode to avoid corrupting the last
		//transmission
	if (PollingEn == USART_enable)
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d106      	bne.n	8001b56 <MCAL_UART_SendData+0x22>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & 1<<7));
 8001b48:	bf00      	nop
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f9      	beq.n	8001b4a <MCAL_UART_SendData+0x16>
	/* When Transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */
	if (USARTx == USART1)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <MCAL_UART_SendData+0xd4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d117      	bne.n	8001b8e <MCAL_UART_SendData+0x5a>
	{
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <MCAL_UART_SendData+0xd8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	891b      	ldrh	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <MCAL_UART_SendData+0x40>
		{
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	605a      	str	r2, [r3, #4]
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
		}
	}
}
 8001b72:	e043      	b.n	8001bfc <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_9B)
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <MCAL_UART_SendData+0xd8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	891b      	ldrh	r3, [r3, #8]
 8001b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7e:	d13d      	bne.n	8001bfc <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
}
 8001b8c:	e036      	b.n	8001bfc <MCAL_UART_SendData+0xc8>
	else if (USARTx == USART2)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <MCAL_UART_SendData+0xdc>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d117      	bne.n	8001bc6 <MCAL_UART_SendData+0x92>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <MCAL_UART_SendData+0xd8>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	891b      	ldrh	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <MCAL_UART_SendData+0x78>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	605a      	str	r2, [r3, #4]
}
 8001baa:	e027      	b.n	8001bfc <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_9B)
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <MCAL_UART_SendData+0xd8>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	891b      	ldrh	r3, [r3, #8]
 8001bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb6:	d121      	bne.n	8001bfc <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	605a      	str	r2, [r3, #4]
}
 8001bc4:	e01a      	b.n	8001bfc <MCAL_UART_SendData+0xc8>
	else if (USARTx == USART3)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <MCAL_UART_SendData+0xe0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d116      	bne.n	8001bfc <MCAL_UART_SendData+0xc8>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MCAL_UART_SendData+0xd8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	891b      	ldrh	r3, [r3, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <MCAL_UART_SendData+0xb0>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	605a      	str	r2, [r3, #4]
}
 8001be2:	e00b      	b.n	8001bfc <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MCAL_UART_SendData+0xd8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	891b      	ldrh	r3, [r3, #8]
 8001bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bee:	d105      	bne.n	8001bfc <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	2000005c 	.word	0x2000005c
 8001c10:	40004400 	.word	0x40004400
 8001c14:	40004800 	.word	0x40004800

08001c18 <MCAL_UART_ReceiveData>:
	place. Configure the DMA register as explained in multibuffer communication. STEP 3
	5. Select the desired baud rate using the baud rate register USART_BRR
	6. Set the RE bit USART_CR1. This enables the receiver which begins searching for a start bit
 * */
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechanism PollingEn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	4613      	mov	r3, r2
 8001c24:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until RXNE flag is set in the SR */
	if (PollingEn == USART_enable)
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <MCAL_UART_ReceiveData+0x22>
	{
		while (!(USARTx->SR & 1<<5));
 8001c2c:	bf00      	nop
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f9      	beq.n	8001c2e <MCAL_UART_ReceiveData+0x16>
	}

	/* 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame */
	if (USARTx == USART1)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4a4d      	ldr	r2, [pc, #308]	; (8001d74 <MCAL_UART_ReceiveData+0x15c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d12e      	bne.n	8001ca0 <MCAL_UART_ReceiveData+0x88>
	{
		/* 9 Bits Data */
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_9B)
 8001c42:	4b4d      	ldr	r3, [pc, #308]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	891b      	ldrh	r3, [r3, #8]
 8001c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4c:	d112      	bne.n	8001c74 <MCAL_UART_ReceiveData+0x5c>
		{
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 8001c4e:	4b4a      	ldr	r3, [pc, #296]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	895b      	ldrh	r3, [r3, #10]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <MCAL_UART_ReceiveData+0x4c>
			{
				/* All 9 bits are data */
				*pRxBuffer = USARTx->DR ;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	801a      	strh	r2, [r3, #0]
				/* just least 7 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
}
 8001c62:	e082      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	801a      	strh	r2, [r3, #0]
}
 8001c72:	e07a      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	895b      	ldrh	r3, [r3, #10]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <MCAL_UART_ReceiveData+0x76>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	801a      	strh	r2, [r3, #0]
}
 8001c8c:	e06d      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	801a      	strh	r2, [r3, #0]
}
 8001c9e:	e064      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
	else if (USARTx == USART2)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <MCAL_UART_ReceiveData+0x164>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d12e      	bne.n	8001d06 <MCAL_UART_ReceiveData+0xee>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_9B)
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	891b      	ldrh	r3, [r3, #8]
 8001cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb2:	d112      	bne.n	8001cda <MCAL_UART_ReceiveData+0xc2>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	895b      	ldrh	r3, [r3, #10]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <MCAL_UART_ReceiveData+0xb2>
				*pRxBuffer = USARTx->DR ;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	801a      	strh	r2, [r3, #0]
}
 8001cc8:	e04f      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	801a      	strh	r2, [r3, #0]
}
 8001cd8:	e047      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	895b      	ldrh	r3, [r3, #10]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <MCAL_UART_ReceiveData+0xdc>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	801a      	strh	r2, [r3, #0]
}
 8001cf2:	e03a      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	801a      	strh	r2, [r3, #0]
}
 8001d04:	e031      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
	else if (USARTx == USART3)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <MCAL_UART_ReceiveData+0x168>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d12d      	bne.n	8001d6a <MCAL_UART_ReceiveData+0x152>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	891b      	ldrh	r3, [r3, #8]
 8001d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d18:	d112      	bne.n	8001d40 <MCAL_UART_ReceiveData+0x128>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	895b      	ldrh	r3, [r3, #10]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <MCAL_UART_ReceiveData+0x118>
				*pRxBuffer = USARTx->DR ;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	801a      	strh	r2, [r3, #0]
}
 8001d2e:	e01c      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF ;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	801a      	strh	r2, [r3, #0]
}
 8001d3e:	e014      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <MCAL_UART_ReceiveData+0x160>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	895b      	ldrh	r3, [r3, #10]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d107      	bne.n	8001d5a <MCAL_UART_ReceiveData+0x142>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	801a      	strh	r2, [r3, #0]
}
 8001d58:	e007      	b.n	8001d6a <MCAL_UART_ReceiveData+0x152>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	801a      	strh	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40013800 	.word	0x40013800
 8001d78:	2000005c 	.word	0x2000005c
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40004800 	.word	0x40004800

08001d84 <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	GPIO_PIN_CONFIG_T Pin_Config;

	if (USARTx == USART1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a73      	ldr	r2, [pc, #460]	; (8001f5c <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d149      	bne.n	8001e28 <MCAL_UART_GPIO_Set_Pins+0xa4>
	{
		// PA9 Tx
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_9;
 8001d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d98:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	486d      	ldr	r0, [pc, #436]	; (8001f60 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001daa:	f7ff fcc8 	bl	800173e <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8001dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db2:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4868      	ldr	r0, [pc, #416]	; (8001f60 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001dc0:	f7ff fcbd 	bl	800173e <MCAL_GPIO_Init>

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001dc4:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	89db      	ldrh	r3, [r3, #14]
 8001dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dce:	d005      	beq.n	8001ddc <MCAL_UART_GPIO_Set_Pins+0x58>
 8001dd0:	4b64      	ldr	r3, [pc, #400]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	89db      	ldrh	r3, [r3, #14]
 8001dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dda:	d10a      	bne.n	8001df2 <MCAL_UART_GPIO_Set_Pins+0x6e>
		{
			// PA11 CTS
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_11;
 8001ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001de0:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	485c      	ldr	r0, [pc, #368]	; (8001f60 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001dee:	f7ff fca6 	bl	800173e <MCAL_GPIO_Init>
		}

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001df2:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	89db      	ldrh	r3, [r3, #14]
 8001df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfc:	d006      	beq.n	8001e0c <MCAL_UART_GPIO_Set_Pins+0x88>
 8001dfe:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	89db      	ldrh	r3, [r3, #14]
 8001e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e08:	f040 80a3 	bne.w	8001f52 <MCAL_UART_GPIO_Set_Pins+0x1ce>
		{
			// PA12 RTS
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_12;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001e12:	2306      	movs	r3, #6
 8001e14:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4619      	mov	r1, r3
 8001e20:	484f      	ldr	r0, [pc, #316]	; (8001f60 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001e22:	f7ff fc8c 	bl	800173e <MCAL_GPIO_Init>
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
		}
	}
}
 8001e26:	e094      	b.n	8001f52 <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a4f      	ldr	r2, [pc, #316]	; (8001f68 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d144      	bne.n	8001eba <MCAL_UART_GPIO_Set_Pins+0x136>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001e34:	2306      	movs	r3, #6
 8001e36:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	4619      	mov	r1, r3
 8001e42:	4847      	ldr	r0, [pc, #284]	; (8001f60 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001e44:	f7ff fc7b 	bl	800173e <MCAL_GPIO_Init>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_3;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	4619      	mov	r1, r3
 8001e56:	4842      	ldr	r0, [pc, #264]	; (8001f60 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001e58:	f7ff fc71 	bl	800173e <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001e5c:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	89db      	ldrh	r3, [r3, #14]
 8001e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e66:	d005      	beq.n	8001e74 <MCAL_UART_GPIO_Set_Pins+0xf0>
 8001e68:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	89db      	ldrh	r3, [r3, #14]
 8001e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e72:	d109      	bne.n	8001e88 <MCAL_UART_GPIO_Set_Pins+0x104>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_0;
 8001e74:	2301      	movs	r3, #1
 8001e76:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	4837      	ldr	r0, [pc, #220]	; (8001f60 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001e84:	f7ff fc5b 	bl	800173e <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001e88:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	89db      	ldrh	r3, [r3, #14]
 8001e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e92:	d005      	beq.n	8001ea0 <MCAL_UART_GPIO_Set_Pins+0x11c>
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	89db      	ldrh	r3, [r3, #14]
 8001e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e9e:	d158      	bne.n	8001f52 <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_1;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	482b      	ldr	r0, [pc, #172]	; (8001f60 <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001eb4:	f7ff fc43 	bl	800173e <MCAL_GPIO_Init>
}
 8001eb8:	e04b      	b.n	8001f52 <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART3)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d147      	bne.n	8001f52 <MCAL_UART_GPIO_Set_Pins+0x1ce>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8001ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec6:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001ec8:	2306      	movs	r3, #6
 8001eca:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4826      	ldr	r0, [pc, #152]	; (8001f70 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8001ed8:	f7ff fc31 	bl	800173e <MCAL_GPIO_Init>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_11;
 8001edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ee0:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	4820      	ldr	r0, [pc, #128]	; (8001f70 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8001eee:	f7ff fc26 	bl	800173e <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	89db      	ldrh	r3, [r3, #14]
 8001ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efc:	d005      	beq.n	8001f0a <MCAL_UART_GPIO_Set_Pins+0x186>
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	89db      	ldrh	r3, [r3, #14]
 8001f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f08:	d10a      	bne.n	8001f20 <MCAL_UART_GPIO_Set_Pins+0x19c>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_13;
 8001f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0e:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4815      	ldr	r0, [pc, #84]	; (8001f70 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8001f1c:	f7ff fc0f 	bl	800173e <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	89db      	ldrh	r3, [r3, #14]
 8001f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2a:	d005      	beq.n	8001f38 <MCAL_UART_GPIO_Set_Pins+0x1b4>
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	89db      	ldrh	r3, [r3, #14]
 8001f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f36:	d10c      	bne.n	8001f52 <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_14;
 8001f38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f3c:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001f3e:	2306      	movs	r3, #6
 8001f40:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001f42:	2301      	movs	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4808      	ldr	r0, [pc, #32]	; (8001f70 <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8001f4e:	f7ff fbf6 	bl	800173e <MCAL_GPIO_Init>
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40010800 	.word	0x40010800
 8001f64:	2000005c 	.word	0x2000005c
 8001f68:	40004400 	.word	0x40004400
 8001f6c:	40004800 	.word	0x40004800
 8001f70:	40010c00 	.word	0x40010c00

08001f74 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8001f78:	4b02      	ldr	r3, [pc, #8]	; (8001f84 <USART1_IRQHandler+0x10>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4798      	blx	r3
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000005c 	.word	0x2000005c

08001f88 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <USART2_IRQHandler+0x10>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4798      	blx	r3
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000005c 	.word	0x2000005c

08001f9c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <USART3_IRQHandler+0x10>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	4798      	blx	r3
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000005c 	.word	0x2000005c

08001fb0 <__libc_init_array>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	4e0c      	ldr	r6, [pc, #48]	; (8001fe8 <__libc_init_array+0x38>)
 8001fb6:	4c0d      	ldr	r4, [pc, #52]	; (8001fec <__libc_init_array+0x3c>)
 8001fb8:	1ba4      	subs	r4, r4, r6
 8001fba:	10a4      	asrs	r4, r4, #2
 8001fbc:	42a5      	cmp	r5, r4
 8001fbe:	d109      	bne.n	8001fd4 <__libc_init_array+0x24>
 8001fc0:	f000 f81a 	bl	8001ff8 <_init>
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	4e0a      	ldr	r6, [pc, #40]	; (8001ff0 <__libc_init_array+0x40>)
 8001fc8:	4c0a      	ldr	r4, [pc, #40]	; (8001ff4 <__libc_init_array+0x44>)
 8001fca:	1ba4      	subs	r4, r4, r6
 8001fcc:	10a4      	asrs	r4, r4, #2
 8001fce:	42a5      	cmp	r5, r4
 8001fd0:	d105      	bne.n	8001fde <__libc_init_array+0x2e>
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
 8001fd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fd8:	4798      	blx	r3
 8001fda:	3501      	adds	r5, #1
 8001fdc:	e7ee      	b.n	8001fbc <__libc_init_array+0xc>
 8001fde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fe2:	4798      	blx	r3
 8001fe4:	3501      	adds	r5, #1
 8001fe6:	e7f2      	b.n	8001fce <__libc_init_array+0x1e>
 8001fe8:	08002128 	.word	0x08002128
 8001fec:	08002128 	.word	0x08002128
 8001ff0:	08002128 	.word	0x08002128
 8001ff4:	0800212c 	.word	0x0800212c

08001ff8 <_init>:
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	bf00      	nop
 8001ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffe:	bc08      	pop	{r3}
 8002000:	469e      	mov	lr, r3
 8002002:	4770      	bx	lr

08002004 <_fini>:
 8002004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002006:	bf00      	nop
 8002008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800200a:	bc08      	pop	{r3}
 800200c:	469e      	mov	lr, r3
 800200e:	4770      	bx	lr
